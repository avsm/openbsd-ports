#!/usr/bin/perl

# $OpenBSD: check-dependencies,v 1.3 2003/02/25 11:38:16 espie Exp $
# Copyright (c) 1999
# Marc Espie.  All rights reserved.
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Neither the name of OpenBSD nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY ITS AUTHOR AND THE OpenBSD project ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
$cache=1;

print "Dependency list\n";
print "---------------\n";
for $file (<*.tgz>)
	{
	$name = $file;
	$name =~ s/\.tgz$//;
	unless ($cache && -f "t/CONTENTS.$name")
		{
		system("tar zxqf $file +CONTENTS");
		rename("+CONTENTS", "t/CONTENTS.$name");
		}
	open(FILE, "t/CONTENTS.$name") or die "No contents";
	$deps{$name}=[];
	while (<FILE>)
		{
		chomp;
		if (m/^\@pkgdep\s+/)
			{
			push(@{$deps{$name}}, $');
			}
		}
	close(FILE);
	print $name, ": ", join(',', @{$deps{$name}}), "\n";
	}

print "Checking topological order\n";
print "--------------------------\n";
# check recursive brokeness
while (($key, $value) = each %deps)
	{
	%pulled=();
	for $np (@$value)
		{
		for $rec (@{$deps{$np}})
			{
			unless (defined $pulled{$rec})
				{
				print "Error: $key depends on $np which depends on $rec\n";
				print "(", join(",", @$value), ")\n";
				}
			}
		$pulled{$np} = 1;
		}
	}
