$OpenBSD: patch-cpu_data_xfer16_cc,v 1.1 2001/02/02 16:59:07 todd Exp $
--- cpu/data_xfer16.cc.orig	Sat Mar 25 21:39:07 2000
+++ cpu/data_xfer16.cc	Tue Oct 17 12:04:00 2000
@@ -86,7 +86,7 @@ BX_CPU_C::MOV_EwSw(BxInstruction_t *i)
   Bit16u seg_reg;
 
 #if BX_CPU_LEVEL < 3
-  bx_panic("MOV_EwSw: incomplete for CPU < 3\n");
+  bio->panic("MOV_EwSw: incomplete for CPU < 3\n");
 #endif
 
   seg_reg = BX_CPU_THIS_PTR sregs[i->nnn].selector.value;
@@ -111,7 +111,7 @@ BX_CPU_C::MOV_SwEw(BxInstruction_t *i)
   Bit16u op2_16;
 
 #if BX_CPU_LEVEL < 3
-  bx_panic("MOV_SwEw: incomplete for CPU < 3\n");
+  bio->panic("MOV_SwEw: incomplete for CPU < 3\n");
 #endif
 
   if (i->mod == 0xc0) {
@@ -138,7 +138,7 @@ BX_CPU_C::MOV_SwEw(BxInstruction_t *i)
 BX_CPU_C::LEA_GwM(BxInstruction_t *i)
 {
   if (i->mod == 0xc0) {
-    bx_panic("LEA_GvM: op2 is a register");
+    bio->panic("LEA_GvM: op2 is a register");
     UndefinedOpcode(i);
     return;
     }
@@ -212,7 +212,7 @@ BX_CPU_C::MOV_EwIw(BxInstruction_t *i)
 BX_CPU_C::MOVZX_GwEb(BxInstruction_t *i)
 {
 #if BX_CPU_LEVEL < 3
-  bx_panic("MOVZX_GvEb: not supported on < 386\n");
+  bio->panic("MOVZX_GvEb: not supported on < 386\n");
 #else
   Bit8u  op2_8;
 
@@ -233,7 +233,7 @@ BX_CPU_C::MOVZX_GwEb(BxInstruction_t *i)
 BX_CPU_C::MOVZX_GwEw(BxInstruction_t *i)
 {
 #if BX_CPU_LEVEL < 3
-  bx_panic("MOVZX_GvEw: not supported on < 386\n");
+  bio->panic("MOVZX_GvEw: not supported on < 386\n");
 #else
   Bit16u op2_16;
 
@@ -254,7 +254,7 @@ BX_CPU_C::MOVZX_GwEw(BxInstruction_t *i)
 BX_CPU_C::MOVSX_GwEb(BxInstruction_t *i)
 {
 #if BX_CPU_LEVEL < 3
-  bx_panic("MOVSX_GvEb: not supported on < 386\n");
+  bio->panic("MOVSX_GvEb: not supported on < 386\n");
 #else
   Bit8u op2_8;
 
@@ -275,7 +275,7 @@ BX_CPU_C::MOVSX_GwEb(BxInstruction_t *i)
 BX_CPU_C::MOVSX_GwEw(BxInstruction_t *i)
 {
 #if BX_CPU_LEVEL < 3
-  bx_panic("MOVSX_GvEw: not supported on < 386\n");
+  bio->panic("MOVSX_GvEw: not supported on < 386\n");
 #else
   Bit16u op2_16;
 
@@ -356,7 +356,7 @@ BX_CPU_C::CMOV_GwEw(BxInstruction_t *i)
     case 0x14F: condition = !get_ZF() && (get_SF() == get_OF()); break;
     default:
       condition = 0;
-      bx_panic("CMOV_GwEw: default case\n");
+      bio->panic("CMOV_GwEw: default case\n");
     }
 
   if (i->mod == 0xc0) {
@@ -371,6 +371,6 @@ BX_CPU_C::CMOV_GwEw(BxInstruction_t *i)
     BX_WRITE_16BIT_REG(i->nnn, op2_16);
     }
 #else
-  bx_panic("cmov_gwew called\n");
+  bio->panic("cmov_gwew called\n");
 #endif
 }
