$OpenBSD: patch-aconfigure_ac,v 1.1 2010/04/02 11:48:24 dcoppa Exp $

use -pthread instead of -lpthread
fix memory alignment detection on sparc64
fix header detection when using external libgsm on OpenBSD

fixes from upstream:
fixes in detecting header availability
enable use of system libraries for gsm, speex and portaudio
check for libcrypto before libssl

--- aconfigure.ac.orig	Wed Oct 28 07:09:15 2009
+++ aconfigure.ac	Thu Apr  1 14:41:24 2010
@@ -1,4 +1,4 @@
-AC_INIT(pjproject,1.0)
+AC_INIT(pjproject,1.x)
 
 host_orig="$host"
 
@@ -17,9 +17,9 @@ AC_CONFIG_FILES([build.mak 
 	         pjlib-util/build/os-auto.mak 
 		 pjmedia/build/os-auto.mak
 		 pjsip/build/os-auto.mak
-		 third_party/build/portaudio/os-auto.mak 
 		 third_party/build/os-auto.mak
-	        ])
+		 third_party/build/portaudio/os-auto.mak 
+		 ])
 
 
 dnl
@@ -48,7 +48,23 @@ case $target in 
 	;;
 esac
 
-AC_CHECK_LIB(pthread,pthread_create)
+AC_CHECK_HEADER(pthread.h, have_pthread_h=yes)
+if test "X$have_pthread_h" = "Xyes" ; then
+    save_LDFLAGS="$LDFLAGS";
+    LDFLAGS="$LDFLAGS -pthread"
+    AC_LINK_IFELSE(
+      [AC_LANG_PROGRAM(
+        [[#include <pthread.h>
+        pthread_t thr;]],
+        [pthread_create(&thr, NULL, NULL, NULL);])],
+      [ac_cv_support_pthreads=yes],
+      [LDFLAGS="$save_LDFLAGS"])
+    if test "X$ac_cv_support_pthreads" != "Xyes" ; then
+      AC_CHECK_LIB(pthread, pthread_create,
+        LIBS="-lpthread $LIBS")
+    fi
+fi
+
 AC_CHECK_LIB(wsock32,puts)
 AC_CHECK_LIB(ws2_32,puts)
 AC_CHECK_LIB(ole32,puts)
@@ -67,7 +83,7 @@ dnl Memory alignment detection
 dnl
 AC_MSG_CHECKING([memory alignment])
 case $target in
-    ia64-* | x86_64-* )
+    ia64-* | x86_64-* | sparc64-* )
 	AC_DEFINE(PJ_POOL_ALIGNMENT, 8)
 	AC_MSG_RESULT([8 bytes])
 	;;
@@ -146,9 +162,15 @@ AC_CHECK_HEADER(netdb.h,[AC_DEFINE(PJ_HAS_NETDB_H,1)])
 AC_CHECK_HEADER(netinet/in_systm.h,[AC_DEFINE(PJ_HAS_NETINET_IN_SYSTM_H,1)])
 AC_CHECK_HEADER(netinet/in.h,[AC_DEFINE(PJ_HAS_NETINET_IN_H,1)])
 AC_CHECK_HEADER(netinet/ip.h,[AC_DEFINE(PJ_HAS_NETINET_IP_H,1)],[],
-		 [#if PJ_HAS_NETINET_IN_SYSTM_H
+		 [#if PJ_HAS_SYS_TYPES_H
+          	  #	include <sys/types.h>
+          	  #endif
+		  #if PJ_HAS_NETINET_IN_SYSTM_H
           	  #	include <netinet/in_systm.h>
           	  #endif
+		  #if PJ_HAS_NETINET_IN_H
+          	  #	include <netinet/in.h>
+          	  #endif
           	 ])
 AC_CHECK_HEADER(netinet/tcp.h,[AC_DEFINE(PJ_HAS_NETINET_TCP_H,1)])
 AC_CHECK_HEADER(ifaddrs.h,[AC_DEFINE(PJ_HAS_IFADDRS_H,1)])
@@ -166,6 +188,8 @@ AC_CHECK_HEADER(sys/socket.h,[AC_DEFINE(PJ_HAS_SYS_SOC
 AC_CHECK_HEADER(sys/time.h,[AC_DEFINE(PJ_HAS_SYS_TIME_H,1)])
 AC_CHECK_HEADER(sys/timeb.h,[AC_DEFINE(PJ_HAS_SYS_TIMEB_H,1)])
 AC_CHECK_HEADER(sys/types.h,[AC_DEFINE(PJ_HAS_SYS_TYPES_H,1)])
+AC_CHECK_HEADER(sys/filio.h,[AC_DEFINE(PJ_HAS_SYS_FILIO_H,1)])
+AC_CHECK_HEADER(sys/sockio.h,[AC_DEFINE(PJ_HAS_SYS_SOCKIO_H,1)])
 AC_CHECK_HEADER(time.h,[AC_DEFINE(PJ_HAS_TIME_H,1)])
 AC_CHECK_HEADER(unistd.h,[AC_DEFINE(PJ_HAS_UNISTD_H,1)])
 AC_CHECK_HEADER(winsock.h,[AC_DEFINE(PJ_HAS_WINSOCK_H,1)])
@@ -180,11 +204,14 @@ AC_CHECK_HEADER(mswsock.h,[AC_DEFINE(PJ_HAS_MSWSOCK_H,
 AC_CHECK_HEADER(ws2tcpip.h,[AC_DEFINE(PJ_HAS_WS2TCPIP_H,1)])
 AC_CHECK_HEADER(uuid/uuid.h,[ac_has_uuid_h=1])
 AC_CHECK_HEADER(net/if.h,[AC_DEFINE(PJ_HAS_NET_IF_H,1)],[],
-		 [#if PJ_HAS_SYS_SOCKET_H
+		 [#if PJ_HAS_SYS_TYPES_H
+          	  #	include <sys/types.h>
+          	  #endif
+		  #if PJ_HAS_SYS_SOCKET_H
+
           	  #	include <sys/socket.h>
           	  #endif
           	 ])
-
 AC_MSG_RESULT([Setting PJ_OS_NAME to $target])
 AC_DEFINE_UNQUOTED(PJ_OS_NAME,["$target"])
 
@@ -256,7 +283,8 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/typ
 
 dnl # Determine if socklen_t is available
 AC_MSG_CHECKING([if socklen_t is available])
-AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/socket.h>]],
+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/types.h>
+                                     #include <sys/socket.h>]],
 		    		   [socklen_t xxx = 0;])],
 		  [AC_DEFINE(PJ_HAS_SOCKLEN_T,1)
 		   AC_MSG_RESULT(yes)],
@@ -367,6 +395,52 @@ dnl #
 dnl # PJMEDIA
 dnl #
 
+dnl # Use external Speex installation
+AC_SUBST(ac_external_speex,0)
+AC_ARG_WITH(external-speex,
+    AC_HELP_STRING([--with-external-speex],
+		   [Use external Speex development files, not the one in "third_party" directory. When this option is set, make sure that Speex is accessible to use (hint: use CFLAGS and LDFLAGS env var to set the include/lib paths)]),
+    [
+	if test "x$with_external_speex" != "xno"; then
+		# Test Speex installation
+		AC_MSG_CHECKING([if external Speex devkit is installed])
+		AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <speex/speex.h>
+						     #include <speex/speex_echo.h>
+						     ]],
+						  [speex_echo_state_init(0, 0); speex_encoder_init(0); ])],
+				  [AC_MSG_RESULT(yes!!)
+				   AC_DEFINE(PJMEDIA_EXTERNAL_SPEEX_CODEC, 1)
+				   ac_external_speex="1"
+				   ],
+				  [AC_MSG_ERROR([Unable to use external Speex library. If Speex development files are not available in the default locations, use CFLAGS and LDFLAGS env var to set the include/lib paths])])
+	fi
+    ]
+    )
+
+dnl # Use external GSM codec library installation
+AC_SUBST(ac_external_gsm,0)
+AC_ARG_WITH(external-gsm,
+    AC_HELP_STRING([--with-external-gsm],
+		   [Use external GSM codec library, not the one in "third_party" directory. When this option is set, make sure that the GSM include/lib files are accessible to use (hint: use CFLAGS and LDFLAGS env var to set the include/lib paths)]),
+    [
+	if test "x$with_external_gsm" != "xno"; then
+		# Test GSM library installation
+		AC_MSG_CHECKING([if external GSM devkit is installed])
+		AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <gsm.h>
+						                   ]],
+						                   [gsm_create(); ])
+						  ],
+				          [AC_MSG_RESULT(yes!!)
+				           AC_DEFINE(PJMEDIA_EXTERNAL_GSM_CODEC, 1)
+				           ac_external_gsm="1"
+				          ],
+				          [AC_MSG_ERROR([Unable to use external GSM library. If GSM development files are not available in the default locations, use CFLAGS and LDFLAGS env var to set the include/lib paths])])
+	fi
+    ]
+    )
+
+
+
 dnl # Sound device backend selection
 AC_SUBST(ac_pjmedia_snd)
 AC_ARG_ENABLE(sound,
@@ -378,6 +452,26 @@ AC_ARG_ENABLE(sound,
 	       fi]
 	      )
 
+dnl # Use external PortAudio installation
+AC_SUBST(ac_external_pa,0)
+AC_ARG_WITH(external-pa,
+    AC_HELP_STRING([--with-external-pa],
+		   [Use external PortAudio development files, not the one in "third_party" directory. When this option is set, make sure that PortAudio is accessible to use (hint: use CFLAGS and LDFLAGS env var to set the include/lib paths)]),
+    [
+	if test "x$with_external_pa" != "xno"; then
+		# Test PortAudio installation
+		AC_MSG_CHECKING([if external PortAudio devkit is installed])
+		AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <portaudio.h>
+						     ]],
+						  [Pa_Initialize();])],
+				  [AC_MSG_RESULT(yes!!)
+				   ac_external_pa="1"
+				   ],
+				  [AC_MSG_ERROR([Unable to use PortAudio. If PortAudio development files are not available in the default locations, use CFLAGS and LDFLAGS env var to set the include/lib paths])])
+	fi
+    ]
+    )
+
 AC_SUBST(ac_pa_cflags)
 AC_CHECK_HEADER(sys/soundcard.h,
 	 	[ac_pa_cflags="$ac_pa_cflags -DHAVE_SYS_SOUNDCARD_H"])
@@ -754,8 +848,8 @@ AC_ARG_ENABLE(ssl,
 		AC_SUBST(libssl_present)
 		AC_SUBST(libcrypto_present)
 		AC_CHECK_HEADER(openssl/ssl.h,[openssl_h_present=1])
-		AC_CHECK_LIB(ssl,SSL_library_init,[libssl_present=1 && LIBS="$LIBS -lssl"])
 		AC_CHECK_LIB(crypto,ERR_load_BIO_strings,[libcrypto_present=1 && LIBS="$LIBS -lcrypto"])
+		AC_CHECK_LIB(ssl,SSL_library_init,[libssl_present=1 && LIBS="$LIBS -lssl"])
 		if test "x$openssl_h_present" = "x1" -a "x$libssl_present" = "x1" -a "x$libcrypto_present" = "x1"; then
 	        	AC_MSG_RESULT([OpenSSL library found, SSL support enabled])
 			# PJSIP_HAS_TLS_TRANSPORT setting follows PJ_HAS_SSL_SOCK
