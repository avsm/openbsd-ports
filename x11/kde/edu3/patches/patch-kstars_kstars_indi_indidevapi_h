$OpenBSD: patch-kstars_kstars_indi_indidevapi_h,v 1.1 2005/02/27 09:09:14 brad Exp $
--- kstars/kstars/indi/indidevapi.h.orig	Fri Jun 25 05:10:04 2004
+++ kstars/kstars/indi/indidevapi.h	Sun Feb 27 03:48:43 2005
@@ -66,25 +66,41 @@ extern "C" {
     \param t pointer to the vector text property to be defined.
     \param msg message in printf style to send to the client. May be NULL.
 */
-extern void IDDefText (const ITextVectorProperty *t, const char *msg, ...);
+extern void IDDefText (const ITextVectorProperty *t, const char *msg, ...)
+#ifdef __GNUC__
+        __attribute__ ( ( format( printf, 2, 3 ) ) )
+#endif
+;
 
 /** \brief Tell client to create a number number property.
     \param n pointer to the vector number property to be defined.
     \param msg message in printf style to send to the client. May be NULL.
 */
-extern void IDDefNumber (const INumberVectorProperty *n, const char *msg, ...);
+extern void IDDefNumber (const INumberVectorProperty *n, const char *msg, ...)
+#ifdef __GNUC__
+        __attribute__ ( ( format( printf, 2, 3 ) ) )
+#endif
+;
 
 /** \brief Tell client to create a switch vector property.
     \param s pointer to the vector switch property to be defined.
     \param msg message in printf style to send to the client. May be NULL.
 */
-extern void IDDefSwitch (const ISwitchVectorProperty *s, const char *msg, ...);
+extern void IDDefSwitch (const ISwitchVectorProperty *s, const char *msg, ...)
+#ifdef __GNUC__
+        __attribute__ ( ( format( printf, 2, 3 ) ) )
+#endif
+;
 
 /** \brief Tell client to create a light vector property.
     \param l pointer to the vector light property to be defined.
     \param msg message in printf style to send to the client. May be NULL.
 */
-extern void IDDefLight (const ILightVectorProperty *l, const char *msg, ...);
+extern void IDDefLight (const ILightVectorProperty *l, const char *msg, ...)
+#ifdef __GNUC__
+        __attribute__ ( ( format( printf, 2, 3 ) ) )
+#endif
+;
 
 /*@}*/
 
@@ -97,25 +113,41 @@ extern void IDDefLight (const ILightVect
     \param t pointer to the vector text property.
     \param msg message in printf style to send to the client. May be NULL.
 */
-extern void IDSetText (const ITextVectorProperty *t, const char *msg, ...);
+extern void IDSetText (const ITextVectorProperty *t, const char *msg, ...)
+#ifdef __GNUC__
+        __attribute__ ( ( format( printf, 2, 3 ) ) )
+#endif
+;
 
 /** \brief Tell client to update an existing number vector property.
     \param n pointer to the vector number property.
     \param msg message in printf style to send to the client. May be NULL.
 */
-extern void IDSetNumber (const INumberVectorProperty *n, const char *msg, ...);
+extern void IDSetNumber (const INumberVectorProperty *n, const char *msg, ...)
+#ifdef __GNUC__
+        __attribute__ ( ( format( printf, 2, 3 ) ) )
+#endif
+;
 
 /** \brief Tell client to update an existing switch vector property.
     \param s pointer to the vector switch property.
     \param msg message in printf style to send to the client. May be NULL.
 */
-extern void IDSetSwitch (const ISwitchVectorProperty *s, const char *msg, ...);
+extern void IDSetSwitch (const ISwitchVectorProperty *s, const char *msg, ...)
+#ifdef __GNUC__
+        __attribute__ ( ( format( printf, 2, 3 ) ) )
+#endif
+;
 
 /** \brief Tell client to update an existing light vector property.
     \param l pointer to the vector light property.
     \param msg message in printf style to send to the client. May be NULL.
 */
-extern void IDSetLight (const ILightVectorProperty *l, const char *msg, ...);
+extern void IDSetLight (const ILightVectorProperty *l, const char *msg, ...)
+#ifdef __GNUC__
+        __attribute__ ( ( format( printf, 2, 3 ) ) )
+#endif
+;
 
 /*@}*/
 
@@ -127,7 +159,11 @@ extern void IDSetLight (const ILightVect
     \param dev device name
     \param msg message in printf style to send to the client.
 */
-extern void IDMessage (const char *dev, const char *msg, ...);
+extern void IDMessage (const char *dev, const char *msg, ...)
+#ifdef __GNUC__
+        __attribute__ ( ( format( printf, 2, 3 ) ) )
+#endif
+;
 
 /** \brief Function Drivers call to inform Clients a Property is no longer available, or the entire device is gone if name is NULL.
 
@@ -135,7 +171,11 @@ extern void IDMessage (const char *dev, 
     \param name property name to be deleted.
     \param msg message in printf style to send to the client.
 */
-extern void IDDelete (const char *dev, const char *name, const char *msg, ...);
+extern void IDDelete (const char *dev, const char *name, const char *msg, ...)
+#ifdef __GNUC__
+        __attribute__ ( ( format( printf, 3, 4 ) ) )
+#endif
+;
 
 /** \brief Function Drivers call to log a message locally.
  
@@ -143,7 +183,11 @@ extern void IDDelete (const char *dev, c
     
     \param msg message in printf style to send to the client.
 */
-extern void IDLog (const char *msg, ...);
+extern void IDLog (const char *msg, ...)
+#ifdef __GNUC__
+        __attribute__ ( ( format( printf, 1, 2 ) ) )
+#endif
+;
 
 /**
  * \defgroup deventFunctions Functions Drivers call to register with the INDI event utilities.
@@ -348,5 +392,5 @@ extern void ISNewSwitch (const char *dev
 #endif
 
 /* For RCS Only -- Do Not Edit
- * @(#) $RCSfile: indidevapi.h,v $ $Date: 2004/06/07 05:59:20 $ $Revision: 1.5 $ $Name:  $
+ * @(#) $RCSfile: indidevapi.h,v $ $Date: 2004/06/07 05:59:20 $ $Revision: 1.5 $ $Name: KDE_3_3_BRANCH $
  */
