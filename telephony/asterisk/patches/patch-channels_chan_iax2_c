$OpenBSD: patch-channels_chan_iax2_c,v 1.2.2.2 2007/08/09 17:11:03 ajacoutot Exp $
--- channels/chan_iax2.c.orig	Tue Jul 31 14:52:50 2007
+++ channels/chan_iax2.c	Tue Jul 31 14:52:44 2007
@@ -3966,7 +3966,9 @@ static int iax2_send(struct chan_iax2_pvt *pvt, struct
 	int sendmini=0;
 	unsigned int lastsent;
 	unsigned int fts;
-		
+
+	frb.fr2.afdatalen = sizeof(frb.buffer);
+
 	if (!pvt) {
 		ast_log(LOG_WARNING, "No private structure for packet?\n");
 		return -1;
@@ -6310,7 +6312,8 @@ static int socket_read(int *id, int fd, short events, 
 	/* allocate an iax_frame with 4096 bytes of data buffer */
 	fr = alloca(sizeof(*fr) + 4096);
 	fr->callno = 0;
-	
+	fr->afdatalen = 4096; /* From alloca() above */
+
 	res = recvfrom(fd, buf, sizeof(buf), 0,(struct sockaddr *) &sin, &len);
 	if (res < 0) {
 		if (errno != ECONNREFUSED)
@@ -6615,6 +6618,13 @@ static int socket_read(int *id, int fd, short events, 
 			ast_mutex_unlock(&iaxsl[fr->callno]);
 			return 1;
 		}
+		/* Ensure text frames are NULL-terminated */
+		if (f.frametype == AST_FRAME_TEXT && buf[res - 1] != '\0') {
+			if (res < sizeof(buf))
+				buf[res++] = '\0';
+			else /* Trims one character from the text message, but that's better than overwriting the end of the buffer. */
+				buf[res - 1] = '\0';
+		}
 		f.datalen = res - sizeof(*fh);
 
 		/* Handle implicit ACKing unless this is an INVAL, and only if this is 
@@ -6679,6 +6689,7 @@ static int socket_read(int *id, int fd, short events, 
 					return 1;
 				}
 				f.data = NULL;
+				f.datalen = 0;
 			} else
 				f.data = buf + sizeof(*fh);
 		} else {
