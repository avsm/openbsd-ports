$OpenBSD: README,v 1.4 2011/01/16 23:03:10 ajacoutot Exp $

Using CUPS under OpenBSD
========================

If you want to print to non-Postscript printers or use CUPS bundled PPD
files (i.e. drivers), you'll need to install ghostscript.  You will also
most probably want to install the foomatic-filters package which
provides a universal filter script.

Depending on your printer model you may need to install some driver
package like (non-exhaustive list): hplip, gutenprint, foo2zjs, splix...

To be able to use CUPS printers from gtk+2 applications, the gtk+2-cups
package needs to be installed.

This package supports both ulpt(4) and libusb for printing to USB
devices. ulpt(4) should work out of the box, however:
* ulpt(4) does not support select() which is used by CUPS to know when
the device can accept more data (http://www.cups.org/str.php?L3028)
* it won't be able to automatically detect the corresponding driver/PPD
* it is deprecated upstream in favor of libusb

Required steps for libusb based printing
----------------------------------------
If you choose to make your USB printer use libusb, you need to allow the
_cups user rw access to the corresponding USB endpoint. To do so, find
where your printer is attached to using dmesg(8) then change the
ownerships accordingly.
ugenX = /dev/ugenX
uhubX = /dev/usbX

e.g.
$ dmesg | grep ugen
ugen0 at uhub1 port 1 "EPSON USB MFP" rev 1.10/1.00 addr 2
$ sudo chown _cups /dev/ugen0.* /dev/usb1

The reason we are changing the user and not the group is that it will
allow for multi-function devices to work for both printing and scanning
(e.g. by being owned by _cups:_saned).

To preserve your changes after a system update, use rc.local(8).
e.g. for a multi-function printer/scanner add the following lines:
chown _cups:_saned /dev/ugen0.* /dev/usb1
