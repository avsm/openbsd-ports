$OpenBSD: patch-src_functions_c,v 1.1 2004/06/17 11:21:43 sturm Exp $
--- src/functions.c.orig	Sat May  1 15:36:52 2004
+++ src/functions.c	Thu Jun 17 12:54:39 2004
@@ -206,13 +206,13 @@ switch (fn = FunctionStringToCode(name))
     {
     if (strcmp(value,CF_NOCLASS) == 0)
        {
-       strcpy(value,CF_ANYCLASS);
+       (void)strlcpy(value,CF_ANYCLASS,CF_EXPANDSIZE);
        return value;
        }
     
     if (strcmp(value,CF_ANYCLASS) == 0)
        {
-       strcpy(value,CF_NOCLASS);
+       (void)strlcpy(value,CF_NOCLASS,CF_EXPANDSIZE);
        return value;
        }
     }
@@ -307,7 +307,7 @@ if (strchr(args,','))
 
 if (lstat(args,&statbuf) == -1)
    {
-   strcpy(value,CF_NOCLASS);
+   (void)strlcpy(value,CF_NOCLASS,CF_EXPANDSIZE);
    return;
    }
  else
@@ -314,12 +314,12 @@ if (lstat(args,&statbuf) == -1)
     {
     if (fn == fn_fileexists)
        {
-       strcpy(value,CF_ANYCLASS);
+       (void)strlcpy(value,CF_ANYCLASS,CF_EXPANDSIZE);
        return;
        }
     }
  
-strcpy(value,CF_NOCLASS);
+(void)strlcpy(value,CF_NOCLASS,CF_EXPANDSIZE);
  
  switch(fn)
     {
@@ -326,7 +326,7 @@ strcpy(value,CF_NOCLASS);
     case fn_isdir:
         if (S_ISDIR(statbuf.st_mode))
            {
-           strcpy(value,CF_ANYCLASS);
+           (void)strlcpy(value,CF_ANYCLASS,CF_EXPANDSIZE);
            return;
            }
         break;
@@ -333,7 +333,7 @@ strcpy(value,CF_NOCLASS);
     case fn_islink:
         if (S_ISLNK(statbuf.st_mode))
            {
-           strcpy(value,CF_ANYCLASS);
+           (void)strlcpy(value,CF_ANYCLASS,CF_EXPANDSIZE);
            return;
            }
         break;
@@ -340,13 +340,13 @@ strcpy(value,CF_NOCLASS);
     case fn_isplain:
         if (S_ISREG(statbuf.st_mode))
            {
-           strcpy(value,CF_ANYCLASS);
+           (void)strlcpy(value,CF_ANYCLASS,CF_EXPANDSIZE);
            return;
            }
         break;
     }
  
- strcpy(value,CF_NOCLASS);
+ (void)strlcpy(value,CF_NOCLASS,CF_EXPANDSIZE);
 }
 
 /*********************************************************************/
@@ -361,7 +361,7 @@ if (strchr(args,','))
    return;
    }
  
-strcpy(value,CF_NOCLASS);
+(void)strlcpy(value,CF_NOCLASS,CF_EXPANDSIZE);
 
 if (!FuzzyMatchParse(args))
    {
@@ -370,7 +370,7 @@ if (!FuzzyMatchParse(args))
 
 if (FuzzySetMatch(args,VIPADDRESS) == 0)
    {
-   strcpy(value,CF_ANYCLASS);
+   (void)strlcpy(value,CF_ANYCLASS,CF_EXPANDSIZE);
    }
 }
 
@@ -385,7 +385,7 @@ void HandleHostRange(char *args,char *va
 
  if (!FuzzyHostParse(args))
     {
-    strcpy(value,CF_NOCLASS);
+    (void)strlcpy(value,CF_NOCLASS,CF_EXPANDSIZE);
     return;
     }
  /* VDEFAULTBINSERVER.name is relative domain name */
@@ -394,12 +394,12 @@ void HandleHostRange(char *args,char *va
  if (FuzzyHostMatch(args,VDEFAULTBINSERVER.name) == 0)
     {
     Debug("SRDEBUG SUCCESS!\n");
-    strcpy(value,CF_ANYCLASS);
+    (void)strlcpy(value,CF_ANYCLASS,CF_EXPANDSIZE);
     }
  else
     {
     Debug("SRDEBUG FAILURE\n");
-    strcpy(value,CF_NOCLASS);
+    (void)strlcpy(value,CF_NOCLASS,CF_EXPANDSIZE);
     }
  
  return;
@@ -414,7 +414,7 @@ void HandleCompareStat(enum builtin fn,c
   int count = 0;
 
 FunctionArgs(args,argv,2); 
-strcpy(value,CF_NOCLASS);
+(void)strlcpy(value,CF_NOCLASS,CF_EXPANDSIZE);
  
 if (stat(argv[0],&frombuf) == -1)
    {
@@ -431,7 +431,7 @@ switch(fn)
    case fn_newerthan:
        if (frombuf.st_mtime < tobuf.st_mtime)
           {
-          strcpy(value,CF_ANYCLASS);
+          (void)strlcpy(value,CF_ANYCLASS,CF_EXPANDSIZE);
           return;
           }
        break;
@@ -439,7 +439,7 @@ switch(fn)
    case fn_accessedbefore:
        if (frombuf.st_atime < tobuf.st_atime)
           {
-          strcpy(value,CF_ANYCLASS);
+          (void)strlcpy(value,CF_ANYCLASS,CF_EXPANDSIZE);
           return;
           }
        break;
@@ -447,13 +447,13 @@ switch(fn)
    case fn_changedbefore:
        if (frombuf.st_ctime < tobuf.st_ctime)
           {
-          strcpy(value,CF_ANYCLASS);
+          (void)strlcpy(value,CF_ANYCLASS,CF_EXPANDSIZE);
           return;
           }       
        break;
    }
  
-strcpy(value,CF_NOCLASS);
+(void)strlcpy(value,CF_NOCLASS,CF_EXPANDSIZE);
 }
 
 
@@ -500,7 +500,7 @@ if (*args == '/')
    
    if (ShellCommandReturnsZero(command))
       {
-      strcpy(value,CF_ANYCLASS);
+      (void)strlcpy(value,CF_ANYCLASS,CF_EXPANDSIZE);
       return;
       }
    }
@@ -509,7 +509,7 @@ if (*args == '/')
     yyerror("ExecResult(/command) must specify an absolute path");
     }
  
- strcpy(value,CF_NOCLASS); 
+ (void)strlcpy(value,CF_NOCLASS,CF_EXPANDSIZE); 
 }
 
 
@@ -527,11 +527,11 @@ Debug("HandleIsDefined(%s)\n",args); 
  
 if (GetMacroValue(CONTEXTID,args))
    {
-   strcpy(value,CF_ANYCLASS);
+   (void)strlcpy(value,CF_ANYCLASS,CF_EXPANDSIZE);
    return;
    }
 
-strcpy(value,CF_NOCLASS); 
+(void)strlcpy(value,CF_NOCLASS,CF_EXPANDSIZE); 
 }
 
 /*********************************************************************/
@@ -547,7 +547,7 @@ value[0] = '\0';
 
 if (PARSING)
    {
-   strcpy(value,"doinstall");
+   (void)strlcpy(value,"doinstall",CF_EXPANDSIZE);
    return;
    }
  
@@ -602,11 +602,11 @@ FunctionArgs(args,argv,2); 
  
 if (strcmp(argv[0],argv[1]) == 0)
    {
-   strcpy(value,CF_ANYCLASS); 
+   (void)strlcpy(value,CF_ANYCLASS,CF_EXPANDSIZE); 
    }
 else
    {
-   strcpy(value,CF_NOCLASS);
+   (void)strlcpy(value,CF_NOCLASS,CF_EXPANDSIZE);
    } 
 }
 
@@ -632,11 +632,11 @@ ret = LocateNextItemMatching(list,argv[0
      
 if (ret != NULL)
    {
-   strcpy(value,CF_ANYCLASS); 
+   (void)strlcpy(value,CF_ANYCLASS,CF_EXPANDSIZE); 
    }
 else
    {
-   strcpy(value,CF_NOCLASS);
+   (void)strlcpy(value,CF_NOCLASS,CF_EXPANDSIZE);
    }
  
 DeleteItemList(list); 
@@ -904,7 +904,7 @@ Verbose("This is a method with return va
     yyerror("Redefinition of method return values");
     }
 
-strcpy(value,"noinstall");
+(void)strlcpy(value,"noinstall",CF_EXPANDSIZE);
 }
 
 /*********************************************************************/
@@ -916,7 +916,7 @@ Verbose("This is a method with return cl
 
  if (strlen(METHODRETURNCLASSES) == 0)
     {
-    strncpy(METHODRETURNCLASSES,args,CF_BUFSIZE-1);
+    strlcpy(METHODRETURNCLASSES,args,sizeof(METHODRETURNCLASSES));
     }
  else
     {
@@ -923,7 +923,7 @@ Verbose("This is a method with return cl
     yyerror("Redefinition of method return classes");
     }
 
- strcpy(value,"noinstall");
+ (void)strlcpy(value,"noinstall",CF_EXPANDSIZE);
 }
 
 /*********************************************************************/
@@ -949,7 +949,7 @@ Debug("ShowState(%s)\n",args); 
 
 if (PARSING)
    {
-   strcpy(value,"doinstall");
+   (void)strlcpy(value,"doinstall",CF_EXPANDSIZE);
    return;
    }
  
@@ -1132,12 +1132,12 @@ if (stat(buffer,&statbuf) == 0)
    
    printf("%s: -----------------------------------------------------------------------------------\n",VPREFIX);
    snprintf(buffer,CF_BUFSIZE,"State of %s peaked at %s\n",args,ctime(&statbuf.st_mtime));
-   strcpy(value,buffer);
+   (void)strlcpy(value,buffer,CF_EXPANDSIZE);
    }
 else 
    {
    snprintf(buffer,CF_BUFSIZE,"State parameter %s is not known or recorded\n",args);   
-   strcpy(value,buffer);
+   (void)strlcpy(value,buffer,CF_EXPANDSIZE);
    }
 
 if (dist)
@@ -1162,7 +1162,7 @@ FunctionArgs(args,argv,1);
 
 if (PARSING)
    {
-   strcpy(value,"doinstall");
+   (void)strlcpy(value,"doinstall",CF_EXPANDSIZE);
    return;
    }
 
@@ -1173,7 +1173,7 @@ if (time >= 0)
    CheckFriendConnections(time);
    }
  
-strcpy(value,""); /* No reply */
+(void)strlcpy(value,"",CF_EXPANDSIZE); /* No reply */
 }
 
 /*********************************************************************/
@@ -1243,11 +1243,11 @@ Debug("PrepModule(%s,%s)\n",argv[0],argv
  
 if (CheckForModule(argv[0],argv[1]))
    {
-   strcpy(value,CF_ANYCLASS);
+   (void)strlcpy(value,CF_ANYCLASS,CF_EXPANDSIZE);
    }
 else
    {
-   strcpy(value,CF_NOCLASS);
+   (void)strlcpy(value,CF_NOCLASS,CF_EXPANDSIZE);
    }
 }
 
@@ -1285,7 +1285,7 @@ if (strchr(args,','))
    return;
    }
 
-strcpy(arg1,UnQuote(args));
+(void)strlcpy(arg1,UnQuote(args),CF_BUFSIZE);
 }
 
 /*********************************************************************/
