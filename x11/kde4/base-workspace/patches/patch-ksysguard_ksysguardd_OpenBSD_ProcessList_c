$OpenBSD: patch-ksysguard_ksysguardd_OpenBSD_ProcessList_c,v 1.3 2011/07/08 10:27:23 dcoppa Exp $

Adapt to new OpenBSD kinfo_proc API.

--- ksysguard/ksysguardd/OpenBSD/ProcessList.c.orig	Fri Jul  8 11:38:52 2011
+++ ksysguard/ksysguardd/OpenBSD/ProcessList.c	Fri Jul  8 11:40:10 2011
@@ -155,7 +155,7 @@ findProcessInList(int pid)
 }
 
 static void
-fillProcessCmdline(char *cmdline, struct kinfo_proc2 *p, size_t maxlen)
+fillProcessCmdline(char *cmdline, struct kinfo_proc *p, size_t maxlen)
 {
 	int mib[4];
 	int ret = -1;
@@ -204,7 +204,7 @@ fillProcessCmdline(char *cmdline, struct kinfo_proc2 *
 }
 
 static int
-updateProcess(struct kinfo_proc2 *p)
+updateProcess(struct kinfo_proc *p)
 {
 	static const char * const statuses[] = { "idle","run","sleep","stop","zombie" };
 	
@@ -317,14 +317,14 @@ updateProcessList(void)
         int mib[6];
         size_t len;
         size_t num;
-        struct kinfo_proc2 *p;
+        struct kinfo_proc *p;
 
 
         mib[0] = CTL_KERN;
-        mib[1] = KERN_PROC2;
+        mib[1] = KERN_PROC;
         mib[2] = KERN_PROC_ALL;
 	mib[3] = 0;
-	mib[4] = sizeof(struct kinfo_proc2);
+	mib[4] = sizeof(struct kinfo_proc);
 	mib[5] = 0;
         if (sysctl(mib, 6, NULL, &len, NULL, 0) == -1)
 		return 0;
@@ -332,11 +332,11 @@ updateProcessList(void)
 	p = malloc(len);
 	if (!p)
 		return 0;
-	mib[5] = len/ sizeof(struct kinfo_proc2);
+	mib[5] = len/ sizeof(struct kinfo_proc);
         if (sysctl(mib, 6, p, &len, NULL, 0) == -1)
 		return 0;
 
-	for (num = 0; num < len / sizeof(struct kinfo_proc2); num++)
+	for (num = 0; num < len / sizeof(struct kinfo_proc); num++)
 		updateProcess(&p[num]);
 	free(p);
 	cleanupProcessList();
