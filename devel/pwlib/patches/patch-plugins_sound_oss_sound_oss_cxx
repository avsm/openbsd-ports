$OpenBSD: patch-plugins_sound_oss_sound_oss_cxx,v 1.5 2008/08/20 01:57:31 jakemsr Exp $
--- plugins/sound_oss/sound_oss.cxx.orig	Thu Oct 18 23:22:33 2007
+++ plugins/sound_oss/sound_oss.cxx	Sat Aug  9 17:44:37 2008
@@ -384,7 +384,7 @@ static void CollectSoundDevices(PDirectory devdir, POr
         // When adding these to the 'dsp' string array, only the first one
         // found is used.
 
-#if !defined P_NETBSD || !defined P_OPENBSD
+#if !defined P_NETBSD && !defined P_OPENBSD
         // Look for dsp
         if (filename == "dsp") {
           dsp.SetAt(0, devname);
@@ -519,6 +519,7 @@ BOOL PSoundChannelOSS::Open(const PString & _device,
 
   Close();
 
+  resampleRate = 0;
 
   // lock the dictionary
   PWaitAndSignal mutex(dictMutex);
@@ -554,6 +555,14 @@ BOOL PSoundChannelOSS::Open(const PString & _device,
     DWORD cmd = 0;
     ::ioctl(os_handle, FIONBIO, &cmd);
 
+#ifdef P_OPENBSD
+    // full-duplex must be set explicitly.  don't worry if it fails because
+    // we might not really want full-duplex, even though we always open the
+    // device read-write.
+    cmd = 1;
+    ::ioctl(os_handle, SNDCTL_DSP_SETDUPLEX, &cmd);
+#endif
+
     // add the device to the dictionary
     SoundHandleEntry * entry = PNEW SoundHandleEntry;
     handleDict().SetAt(_device, entry); 
@@ -645,7 +654,9 @@ BOOL PSoundChannelOSS::Setup()
 
           mSampleRate = entry.sampleRate;
           arg = val = entry.sampleRate;
-          if (ConvertOSError(::ioctl(os_handle, SNDCTL_DSP_SPEED, &arg))) {
+          // don't error out if this gives us an error, simply resample
+          // based on the returned rate.
+          ConvertOSError(::ioctl(os_handle, SNDCTL_DSP_SPEED, &arg));
             stat = TRUE;
 
             // detect cases where the hardware can't do the actual rate we need, but can do a simple multiple
@@ -658,7 +669,6 @@ BOOL PSoundChannelOSS::Setup()
                 actualSampleRate = arg;
               }
             }
-          }
         }
       }
 
@@ -819,6 +829,7 @@ BOOL PSoundChannelOSS::Read(void * buf, PINDEX len)
       // use an average, not just a single sample
       const BYTE * src = resampleBuffer;
       while ( ((src - resampleBuffer) < bytes) && (dst < dstEnd)) {
+#if 0
         int sample = 0;
         unsigned j;
         for (j = 0; j < resampleRate; ++j) {
@@ -828,6 +839,13 @@ BOOL PSoundChannelOSS::Read(void * buf, PINDEX len)
         *(PUInt16l *)dst = sample / resampleRate;
         dst +=2 ;
         lastReadCount += 2;
+#else
+        // don't average, just use 1/resampleRate bytes
+        *(PUInt16l *)dst = *(PUInt16l *)src;
+        src += 2 * resampleRate;
+        dst +=2 ;
+        lastReadCount += 2;  
+#endif
       }
     }
   }
