$OpenBSD: patch-konsole_konsole_TEPty_cpp,v 1.4 2003/12/07 20:19:13 espie Exp $
--- konsole/konsole/TEPty.cpp.orig	2003-09-01 13:32:01.000000000 +0200
+++ konsole/konsole/TEPty.cpp	2003-12-04 02:59:16.000000000 +0100
@@ -137,6 +137,9 @@
         #include <errno.h>
         #include <utmp.h>
 #endif
+#ifdef __OpenBSD__
+#undef USE_LOGIN
+#endif
 
 #include <signal.h>
 
@@ -229,7 +232,13 @@ void TEPtyInit()
 #endif
 }
 
-int chownpty(int fd, bool grant)
+const int PTY_GRANT=0,
+	PTY_REVOKE=1,
+	PTY_LOGIN=2,
+	PTY_LOGOUT=3;
+	
+
+int chownpty(int fd, int mode)
 // param fd: the fd of a master pty.
 // param grant: true to grant, false to revoke
 // returns 1 on success 0 on fail
@@ -252,6 +261,7 @@ int chownpty(int fd, bool grant)
   }
   if (pid == 0)
   {
+    const char *arg;
     /* We pass the master pseudo terminal as file descriptor PTY_FILENO. */
     if (fd != PTY_FILENO && dup2(fd, PTY_FILENO) < 0) exit(1);
     QString path = locate("exe", BASE_CHOWN);
@@ -260,7 +270,21 @@ int chownpty(int fd, bool grant)
     ** to be constant, we need an additional parameter.
     */
     QString fdnumber = QString::number(PTY_FILENO);
-    execle(path.ascii(), BASE_CHOWN, grant?"--grant":"--revoke", fdnumber.ascii(), NULL, NULL);
+    switch(mode) {
+    case PTY_REVOKE:
+    	arg = "--revoke";
+	break;
+    case PTY_GRANT:
+    	arg = "--grant";
+	break;
+    case PTY_LOGIN:
+    	arg = "--login";
+	break;
+    case PTY_LOGOUT:
+    	arg = "--logout";
+	break;
+    }
+    execle(path.ascii(), BASE_CHOWN, arg, fdnumber.ascii(), NULL, NULL);
     exit(1); // should not be reached
   }
 
@@ -308,7 +332,7 @@ void TEPty::commClose()
      utmp.start(KProcess::Block);
   }
 #elif defined(USE_LOGIN)
-  char *tty_name=ttyname(0);
+  char *tty_name=ttynam;
   if (tty_name)
   {
   	if (strncmp(tty_name, "/dev/", 5) == 0)
@@ -316,7 +340,10 @@ void TEPty::commClose()
         logout(tty_name);
   }
 #endif
-  if (m_bNeedGrantPty) chownpty(m_MasterFd, false);
+#ifdef __OpenBSD__
+  chownpty(m_MasterFd, PTY_LOGOUT);
+#endif
+  if (m_bNeedGrantPty) chownpty(m_MasterFd, PTY_REVOKE);
 
   KProcess::commClose();
 }
@@ -392,7 +419,7 @@ void TEPty::openPty()
   // be opened by several different methods.
 
   // We try, as we know them, one by one.
-#if defined(HAVE_OPENPTY) //FIXME: some work needed.
+#if defined(HAVE_OPENPTY) && !defined(__OpenBSD__) //FIXME: some work needed.
   if (m_MasterFd < 0) {
     int master_fd, slave_fd;
     if (openpty(&master_fd, &slave_fd, NULL, NULL, NULL) == 0) {
@@ -488,7 +515,7 @@ void TEPty::openPty()
     return;
   }
 
-  if (m_bNeedGrantPty && !chownpty(m_MasterFd, true))
+  if (m_bNeedGrantPty && !chownpty(m_MasterFd, PTY_GRANT))
   {
     fprintf(stderr,"konsole: chownpty failed for device %s::%s.\n",ptynam,ttynam);
     fprintf(stderr,"       : This means the session can be eavesdroped.\n");
@@ -497,7 +524,6 @@ void TEPty::openPty()
             KGlobal::dirs()->findResourceDir("exe",
                                              "konsole").local8Bit().data());
   }
-
   fcntl(m_MasterFd,F_SETFL,O_NDELAY);
 }
 
@@ -603,7 +629,7 @@ int TEPty::makePty(bool _addutmp)
   }
 #endif
 
-  if (! (str_ptr=ttyname(tt)) ) {
+  if (! (str_ptr=ttyname(tt)) && !(str_ptr=ttynam)) {
 #ifdef Q_OS_FREEBSD
     /*
     ** In FreeBSD, the ttyname() call always returns NULL
@@ -628,6 +654,9 @@ int TEPty::makePty(bool _addutmp)
 
   login(&l_struct);
 #endif
+#ifdef __OpenBSD__
+  chownpty(tt, PTY_LOGIN);
+#endif
   return tt;
 }
 
