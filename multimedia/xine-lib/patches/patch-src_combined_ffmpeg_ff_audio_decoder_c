$OpenBSD: patch-src_combined_ffmpeg_ff_audio_decoder_c,v 1.2 2011/10/09 20:45:07 sthen Exp $

- Eliminate use of old FFmpeg APIs.
- Fix audio crash (SSE2 alignment).
- Use xine's fast memcpy.
- Pad end of audio data buffer with zeros.
- Not every audio packet can be used to determine the sample rate and number of
  audio channels.

--- src/combined/ffmpeg/ff_audio_decoder.c.orig	Tue Mar 23 11:41:49 2010
+++ src/combined/ffmpeg/ff_audio_decoder.c	Sun Oct  2 15:45:17 2011
@@ -46,6 +46,12 @@
 
 #define AUDIOBUFSIZE (64 * 1024)
 
+#if LIBAVCODEC_VERSION_MAJOR >= 53 || (LIBAVCODEC_VERSION_MAJOR == 52 && LIBAVCODEC_VERSION_MINOR >= 32)
+#  define AVAUDIO 3
+#else
+#  define AVAUDIO 2
+#endif
+
 typedef struct {
   audio_decoder_class_t   decoder_class;
 } ff_audio_class_t;
@@ -75,13 +81,41 @@ typedef struct ff_audio_decoder_s {
 
 #include "ff_audio_list.h"
 
+#define malloc16(s) realloc16(NULL,s)
+#define free16(p) realloc16(p,0)
+
+static void *realloc16 (void *m, size_t s) {
+  unsigned long diff, diff2;
+  unsigned char *p = m, *q;
+  if (p) {
+    diff = p[-1];
+    if (s == 0) {
+      free (p - diff);
+      return (NULL);
+    }
+    q = realloc (p - diff, s + 16);
+    if (!q) return (q);
+    diff2 = 16 - ((unsigned long)q & 15);
+    if (diff2 != diff) memmove (q + diff2, q + diff, s);
+  } else {
+    if (s == 0) return (NULL);
+    q = malloc (s + 16);
+    if (!q) return (q);
+    diff2 = 16 - ((unsigned long)q & 15);
+  }
+  q += diff2;
+  q[-1] = diff2;
+  return (q);
+}
+
+
  static void ff_audio_ensure_buffer_size(ff_audio_decoder_t *this, int size) {
   if (size > this->bufsize) {
     this->bufsize = size + size / 2;
     xprintf(this->stream->xine, XINE_VERBOSITY_LOG,
             _("ffmpeg_audio_dec: increasing buffer to %d to avoid overflow.\n"),
             this->bufsize);
-    this->buf = realloc( this->buf, this->bufsize );
+    this->buf = realloc16 (this->buf, this->bufsize + FF_INPUT_BUFFER_PADDING_SIZE);
   }
 }
 
@@ -94,14 +128,13 @@ static void ff_audio_decode_data (audio_decoder_t *thi
   int out;
   audio_buffer_t *audio_buffer;
   int bytes_to_send;
-  unsigned int codec_type = buf->type & 0xFFFF0000;
+  unsigned int codec_type = buf->type & (BUF_MAJOR_MASK | BUF_DECODER_MASK);
 
-  if ( (buf->decoder_flags & BUF_FLAG_HEADER) &&
-      !(buf->decoder_flags & BUF_FLAG_SPECIAL) ) {
+  if ( (buf->decoder_flags & (BUF_FLAG_HEADER | BUF_FLAG_SPECIAL)) == BUF_FLAG_HEADER ) {
 
     /* accumulate init data */
     ff_audio_ensure_buffer_size(this, this->size + buf->size);
-    memcpy(this->buf + this->size, buf->content, buf->size);
+    xine_fast_memcpy(this->buf + this->size, buf->content, buf->size);
     this->size += buf->size;
 
     if (buf->decoder_flags & BUF_FLAG_FRAME_END) {
@@ -241,7 +274,7 @@ static void ff_audio_decode_data (audio_decoder_t *thi
 
       this->size = 0;
 
-      this->decode_buffer = calloc(1, AVCODEC_MAX_AUDIO_FRAME_SIZE);
+      this->decode_buffer = malloc16 (AVCODEC_MAX_AUDIO_FRAME_SIZE);
 
       return;
     }
@@ -255,6 +288,9 @@ static void ff_audio_decode_data (audio_decoder_t *thi
       buf->decoder_info[2]);
 
   } else if (!(buf->decoder_flags & BUF_FLAG_SPECIAL)) {
+#if AVAUDIO > 2
+    AVPacket avpkt;
+#endif
 
     if( !this->decoder_ok ) {
       if ( ! this->context || ! this->codec ) {
@@ -285,17 +321,36 @@ static void ff_audio_decode_data (audio_decoder_t *thi
 
     if (!this->output_open) {
       if (!this->audio_bits || !this->audio_sample_rate || !this->audio_channels) {
+        int ret;
+
         decode_buffer_size = AVCODEC_MAX_AUDIO_FRAME_SIZE;
-        avcodec_decode_audio2 (this->context,
-                              (int16_t *)this->decode_buffer,
-                              &decode_buffer_size,
-                              &this->buf[0],
-                              this->size);
+#if AVAUDIO > 2
+	av_init_packet (&avpkt);
+	avpkt.data = (uint8_t *)&this->buf[0];
+	avpkt.size = this->size;
+	avpkt.flags = AV_PKT_FLAG_KEY;
+	ret = avcodec_decode_audio3 (this->context,
+				     (int16_t *)this->decode_buffer,
+				     &decode_buffer_size, &avpkt);
+#else
+        ret = avcodec_decode_audio2 (this->context,
+                                     (int16_t *)this->decode_buffer,
+                                     &decode_buffer_size,
+                                     &this->buf[0],
+                                     this->size);
+#endif
 	this->audio_bits = this->context->bits_per_sample;
 	this->audio_sample_rate = this->context->sample_rate;
 	this->audio_channels = this->context->channels;
-	if (!this->audio_bits || !this->audio_sample_rate || !this->audio_channels)
+	if (!this->audio_bits || !this->audio_sample_rate || !this->audio_channels) {
+	  xprintf(this->stream->xine, XINE_VERBOSITY_LOG,
+	          _("ffmpeg_audio_dec: cannot read codec parameters from packet (error=%d)\n"), ret);
+
+	  /* We can't use this packet, so we must discard it
+	   * and wait for another one. */
+	  this->size = 0;
 	  return;
+	}
       }
       this->output_open = (this->stream->audio_out->open) (this->stream->audio_out,
         this->stream, this->audio_bits, this->audio_sample_rate,
@@ -309,14 +364,27 @@ static void ff_audio_decode_data (audio_decoder_t *thi
     if (buf->decoder_flags & BUF_FLAG_FRAME_END)  { /* time to decode a frame */
 
       offset = 0;
+
+      /* pad input data */
+      memset(&this->buf[this->size], 0, FF_INPUT_BUFFER_PADDING_SIZE);
+
       while (this->size>0) {
         decode_buffer_size = AVCODEC_MAX_AUDIO_FRAME_SIZE;
+#if AVAUDIO > 2
+	av_init_packet (&avpkt);
+	avpkt.data = (uint8_t *)&this->buf[offset];
+	avpkt.size = this->size;
+	avpkt.flags = AV_PKT_FLAG_KEY;
+	bytes_consumed = avcodec_decode_audio3 (this->context,
+						(int16_t *)this->decode_buffer,
+						&decode_buffer_size, &avpkt);
+#else
         bytes_consumed = avcodec_decode_audio2 (this->context,
                                                (int16_t *)this->decode_buffer,
                                                &decode_buffer_size,
                                                &this->buf[offset],
                                                this->size);
-
+#endif
         if (bytes_consumed<0) {
           xprintf (this->stream->xine, XINE_VERBOSITY_DEBUG,
                    "ffmpeg_audio_dec: error decompressing audio frame\n");
@@ -427,8 +495,8 @@ static void ff_audio_dispose (audio_decoder_t *this_ge
     this->stream->audio_out->close (this->stream->audio_out, this->stream);
   this->output_open = 0;
 
-  free(this->buf);
-  free(this->decode_buffer);
+  free16 (this->buf);
+  free16 (this->decode_buffer);
 
   if(this->context && this->context->extradata)
     free(this->context->extradata);
