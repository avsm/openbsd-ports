$OpenBSD: patch-util_neo_hdf_c,v 1.3 2008/11/11 19:58:15 okan Exp $
--- util/neo_hdf.c.orig	Wed Jul 11 21:52:37 2007
+++ util/neo_hdf.c	Sun Nov  9 16:31:10 2008
@@ -642,14 +642,15 @@ static NEOERR* _set_value (HDF *hdf, const char *name,
 
   if (hdf->link)
   {
-    char *new_name = (char *) malloc(strlen(hdf->value) + 1 + strlen(name) + 1);
+    size_t nn_siz = strlen(hdf->value) + 1 + strlen(name) + 1;
+    char *new_name = (char *) malloc(nn_siz);
     if (new_name == NULL)
     {
       return nerr_raise(NERR_NOMEM, "Unable to allocate memory");
     }
-    strcpy(new_name, hdf->value);
-    strcat(new_name, ".");
-    strcat(new_name, name);
+    strlcpy(new_name, hdf->value, nn_siz);
+    strlcat(new_name, ".", nn_siz);
+    strlcat(new_name, name, nn_siz);
     err = _set_value (hdf->top, new_name, value, dup, wf, link, attr, set_node);
     free(new_name);
     return nerr_pass(err);
@@ -789,13 +790,14 @@ skip_search:
     }
     else if (hp->link) 
     {
-      char *new_name = (char *) malloc(strlen(hp->value) + strlen(s) + 1);
+      size_t nn_siz = strlen(hp->value) + strlen(s) + 1;
+      char *new_name = (char *) malloc(nn_siz);
       if (new_name == NULL)
       {
         return nerr_raise(NERR_NOMEM, "Unable to allocate memory");
       }
-      strcpy(new_name, hp->value);
-      strcat(new_name, s);
+      strlcpy(new_name, hp->value, nn_siz);
+      strlcat(new_name, s, nn_siz);
       err = _set_value (hdf->top, new_name, value, dup, wf, link, attr, set_node);
       free(new_name);
       return nerr_pass(err);
@@ -1228,8 +1230,9 @@ static NEOERR* hdf_dump_cb(HDF *hdf, const char *prefi
     {
       if (prefix && (dtype == DUMP_TYPE_DOTTED))
       {
-	p = (char *) malloc (strlen(hdf->name) + strlen(prefix) + 2);
-	sprintf (p, "%s.%s", prefix, hdf->name);
+	size_t need = strlen(hdf->name) + strlen(prefix) + 2;
+	p = (char *) malloc (need);
+	snprintf (p, need, "%s.%s", prefix, hdf->name);
 	err = hdf_dump_cb (hdf, p, dtype, lvl+1, rock, dump_cbf);
 	free(p);
       }
