$OpenBSD: patch-fpu_fpu_cc,v 1.1 2001/02/02 16:59:10 todd Exp $
--- fpu/fpu.cc.orig	Sat Mar 25 21:57:16 2000
+++ fpu/fpu.cc	Tue Oct 17 12:04:03 2000
@@ -46,7 +46,7 @@ BX_CPU_C::ESC0(BxInstruction_t *i)
 #if BX_SUPPORT_FPU
   fpu_execute(i);
 #else
-  bx_printf("ESC0 not implemented\n");
+  bio->printf("ESC0 not implemented\n");
 #endif
 }
 
@@ -59,7 +59,7 @@ BX_CPU_C::ESC1(BxInstruction_t *i)
 #if BX_SUPPORT_FPU
   fpu_execute(i);
 #else
-  bx_printf("ESC1 not implemented\n");
+  bio->printf("ESC1 not implemented\n");
 #endif
 }
 
@@ -72,7 +72,7 @@ BX_CPU_C::ESC2(BxInstruction_t *i)
 #if BX_SUPPORT_FPU
   fpu_execute(i);
 #else
-  bx_printf("ESC2 not implemented\n");
+  bio->printf("ESC2 not implemented\n");
 #endif
 }
 
@@ -89,7 +89,7 @@ BX_CPU_C::ESC3(BxInstruction_t *i)
 #if BX_SUPPORT_FPU
   fpu_execute(i);
 #else
-  bx_printf("ESC3 not implemented\n");
+  bio->printf("ESC3 not implemented\n");
 #endif
 }
 
@@ -102,7 +102,7 @@ BX_CPU_C::ESC4(BxInstruction_t *i)
 #if BX_SUPPORT_FPU
   fpu_execute(i);
 #else
-  bx_printf("ESC4 not implemented\n");
+  bio->printf("ESC4 not implemented\n");
 #endif
 }
 
@@ -115,7 +115,7 @@ BX_CPU_C::ESC5(BxInstruction_t *i)
 #if BX_SUPPORT_FPU
   fpu_execute(i);
 #else
-  bx_printf("ESC5 not implemented\n");
+  bio->printf("ESC5 not implemented\n");
 #endif
 }
 
@@ -128,7 +128,7 @@ BX_CPU_C::ESC6(BxInstruction_t *i)
 #if BX_SUPPORT_FPU
   fpu_execute(i);
 #else
-  bx_printf("ESC6 not implemented\n");
+  bio->printf("ESC6 not implemented\n");
 #endif
 }
 
@@ -141,7 +141,7 @@ BX_CPU_C::ESC7(BxInstruction_t *i)
 #if BX_SUPPORT_FPU
   fpu_execute(i);
 #else
-  bx_printf("ESC7 not implemented\n");
+  bio->printf("ESC7 not implemented\n");
 #endif
 }
 
@@ -153,7 +153,7 @@ BX_CPU_C::FWAIT(BxInstruction_t *i)
   // The same goes for prefix instructions, and instructions which
   // modify segment registers. (pg4-16)
   // BX_CPU_THIS_PTR single_step_event = 0;
-  bx_panic("WAIT: not implemented for < 386\n");
+  bio->panic("WAIT: not implemented for < 386\n");
 #else // BX_CPU_LEVEL >= 3
 
   if ( BX_CPU_THIS_PTR cr0.ts && BX_CPU_THIS_PTR cr0.mp ) {
@@ -162,7 +162,7 @@ BX_CPU_C::FWAIT(BxInstruction_t *i)
 #if BX_SUPPORT_FPU
   fpu_execute(i);
 #else
-  bx_printf("FWAIT: no FPU\n");
+  bio->printf("FWAIT: no FPU\n");
 #endif
 
 #endif
