$OpenBSD: patch-j2se_src_solaris_native_java_lang_UNIXProcess_md_c,v 1.3 2007/04/13 00:29:48 kurt Exp $
--- j2se/src/solaris/native/java/lang/UNIXProcess_md.c.orig	Thu Apr 12 06:28:13 2007
+++ j2se/src/solaris/native/java/lang/UNIXProcess_md.c	Thu Apr 12 06:34:01 2007
@@ -304,14 +304,18 @@ Java_java_lang_UNIXProcess_waitForProcessExit(JNIEnv* 
 
 #if defined(__OpenBSD__)
 /*
- * On OpenBSD closefrom will close only the opened fds without
- * having to use heuristics and is safe to use when single
- * threaded.
+ * Directly call _thread_sys_closefrom() so the child process
+ * doesn't reset the parrent's file descriptors to be blocking.
+ * This function is only called from the child process which
+ * is single threaded and about to call execvp() so it is
+ * safe to bypass the threaded closefrom().
  */
+int _thread_sys_closefrom(int);
+
 static int
 closeDescriptors(void)
 {
-	return closefrom(3);
+	return _thread_sys_closefrom(3);
 }
 
 #else
@@ -559,6 +563,28 @@ Java_java_lang_UNIXProcess_forkAndExec(JNIEnv *env,
 
     if (resultPid == 0) {
 	/* Child process */
+
+#ifdef __OpenBSD__
+// XXXBSD: Work-around userland pthread implementation issue.
+// Closing file descriptors will reset them to be blocking.
+// This is problematic for the parent when it attemts to use
+// the blocking fd and deadlocks. Setting them to non-blocking
+// in the child prevents the close/dup2 from resetting them.
+    {
+	int flags;
+	flags = fcntl(STDIN_FILENO, F_GETFL, NULL);
+	if (flags != -1)
+	    fcntl(STDIN_FILENO, F_SETFL, flags | O_NONBLOCK);
+
+	flags = fcntl(STDOUT_FILENO, F_GETFL, NULL);
+	if (flags != -1)
+	    fcntl(STDOUT_FILENO, F_SETFL, flags | O_NONBLOCK);
+
+	flags = fcntl(STDERR_FILENO, F_GETFL, NULL);
+	if (flags != -1)
+	    fcntl(STDOUT_FILENO, F_SETFL, flags | O_NONBLOCK);
+    }
+#endif
 
 	/* Close the parent sides of the pipe.
 	   Give the child sides of the pipes the right fileno's.
