$OpenBSD: patch-src_misc_c,v 1.4 2005/07/21 15:16:47 aanriot Exp $
--- src/misc.c.orig	Fri Mar 11 12:57:29 2005
+++ src/misc.c	Fri Jul 15 12:24:01 2005
@@ -540,17 +540,17 @@ char *ChecksumPrint(char type,unsigned c
 
 switch(type)
    {
-   case 's': sprintf(buffer,"SHA=  ");
+   case 's': (void)snprintf(buffer,sizeof(buffer),"SHA=  ");
        len = 20;
        break;
-   case 'm': sprintf(buffer,"MD5=  ");
+   case 'm': (void)snprintf(buffer,sizeof(buffer),"MD5=  ");
        len = 16;
        break;
    }
   
 for (i = 0; i < len; i++)
    {
-   sprintf((char *)(buffer+4+2*i),"%02x", digest[i]);
+   (void)snprintf((char *)(buffer+4+2*i),sizeof(buffer),"%02x", digest[i]);
    }
 
 return buffer; 
@@ -926,17 +926,17 @@ char strmajor[CF_MAXVARSIZE];
     release += strlen(RELEASE_FLAG);
     if (sscanf(release, "%d", &major) == 1)
        {
-       sprintf(strmajor, "%d", major);
+       (void)snprintf(strmajor, sizeof(strmajor), "%d", major);
        }
     }
  
  if (major != -1 && vendor != "")
     {
     classbuf[0] = '\0';
-    strcat(classbuf, vendor);
+    (void)strlcat(classbuf, vendor, sizeof(classbuf));
     AddClassToHeap(classbuf);
-    strcat(classbuf, "_");
-    strcat(classbuf, strmajor);
+    (void)strlcat(classbuf, "_", sizeof(classbuf));
+    (void)strlcat(classbuf, strmajor, sizeof(classbuf));
     AddClassToHeap(classbuf);
     }
  
@@ -1094,15 +1094,15 @@ Verbose("Looking for redhat linux info i
     release += strlen(RELEASE_FLAG);
     if (sscanf(release, "%d.%d", &major, &minor) == 2)
        {
-       sprintf(strmajor, "%d", major);
-       sprintf(strminor, "%d", minor);
+       (void)snprintf(strmajor, sizeof(strmajor), "%d", major);
+       (void)snprintf(strminor, sizeof(strminor), "%d", minor);
        }
     /* red hat 9 is *not* red hat 9.0. 
      * and same thing with RHEL AS 3
      */
     else if (sscanf(release, "%d", &major) == 1)
        {
-       sprintf(strmajor, "%d", major);
+       (void)snprintf(strmajor, sizeof(strmajor), "%d", major);
        minor = -2;
        };
     }
@@ -1110,21 +1110,21 @@ Verbose("Looking for redhat linux info i
  if (major != -1 && minor != -1 && vendor != "")
     {
     classbuf[0] = '\0';
-    strcat(classbuf, vendor);
+    (void)strlcat(classbuf, vendor, sizeof(classbuf));
     AddClassToHeap(classbuf);
-    strcat(classbuf, "_");
+    (void)strlcat(classbuf, "_", sizeof(classbuf));
     if(edition != "")
        {
-       strcat(classbuf, edition);
+       (void)strlcat(classbuf, edition, sizeof(classbuf));
        AddClassToHeap(classbuf);
-       strcat(classbuf, "_");
+       (void)strlcat(classbuf, "_", sizeof(classbuf));
        }
-    strcat(classbuf, strmajor);
+    (void)strlcat(classbuf, strmajor, sizeof(classbuf));
     AddClassToHeap(classbuf);
     if (minor != -2)
        {
-       strcat(classbuf, "_");
-       strcat(classbuf, strminor);
+       (void)strlcat(classbuf, "_", sizeof(classbuf));
+       (void)strlcat(classbuf, strminor, sizeof(classbuf));
        AddClassToHeap(classbuf);
        }
     }
@@ -1171,13 +1171,13 @@ FILE *fp;
  if(!strncmp(relstring, SUSE_SLES8_ID, strlen(SUSE_SLES8_ID)))
     {
     classbuf[0] = '\0';
-    strcat(classbuf, "SLES8");
+    (void)strlcat(classbuf, "SLES8", sizeof(classbuf));
     AddClassToHeap(classbuf);
      }
  else if(!strncmp(relstring, SUSE_SLES9_ID, strlen(SUSE_SLES9_ID)))
     {
     classbuf[0] = '\0';
-    strcat(classbuf, "SLES9");
+    (void)strlcat(classbuf, "SLES9", sizeof(classbuf));
     AddClassToHeap(classbuf);
     }
  
@@ -1198,19 +1198,19 @@ FILE *fp;
     {
     release += strlen(SUSE_RELEASE_FLAG);
     sscanf(release, "%d.%d", &major, &minor);
-    sprintf(strmajor, "%d", major);
-    sprintf(strminor, "%d", minor);
+    (void)snprintf(strmajor, sizeof(strmajor), "%d", major);
+    (void)snprintf(strminor, sizeof(strminor), "%d", minor);
     }
     if(major != -1 && minor != -1)
     {
     classbuf[0] = '\0';
-    strcat(classbuf, "SuSE");
+    (void)strlcat(classbuf, "SuSE", sizeof(classbuf));
     AddClassToHeap(classbuf);
-    strcat(classbuf, "_");
-    strcat(classbuf, strmajor);
+    (void)strlcat(classbuf, "_", sizeof(classbuf));
+    (void)strlcat(classbuf, strmajor, sizeof(classbuf));
     AddClassToHeap(classbuf);
-    strcat(classbuf, "_");
-    strcat(classbuf, strminor);
+    (void)strlcat(classbuf, "_", sizeof(classbuf));
+    (void)strlcat(classbuf, strminor, sizeof(classbuf));
     AddClassToHeap(classbuf);
     }
  
@@ -1323,8 +1323,8 @@ char strminor[CF_MAXVARSIZE];
     release += strlen(RELEASE_FLAG);
     if (sscanf(release, "%d.%d", &major, &minor) == 2)
        {
-       sprintf(strmajor, "%d", major);
-       sprintf(strminor, "%d", minor);
+       (void)snprintf(strmajor, sizeof(strmajor), "%d", major);
+       (void)snprintf(strminor, sizeof(strminor), "%d", minor);
        }
     else
        {
@@ -1336,15 +1336,15 @@ char strminor[CF_MAXVARSIZE];
  if (major != -1 && minor != -1 && vendor != "")
     {
     classbuf[0] = '\0';
-    strcat(classbuf, vendor);
+    (void)strlcat(classbuf, vendor, sizeof(classbuf));
     AddClassToHeap(classbuf);
-    strcat(classbuf, "_");
-    strcat(classbuf, strmajor);
+    (void)strlcat(classbuf, "_", sizeof(classbuf));
+    (void)strlcat(classbuf, strmajor, sizeof(classbuf));
     AddClassToHeap(classbuf);
     if (minor != -2)
        {
-       strcat(classbuf, "_");
-       strcat(classbuf, strminor);
+       (void)strlcat(classbuf, "_", sizeof(classbuf));
+       (void)strlcat(classbuf, strminor, sizeof(classbuf));
        AddClassToHeap(classbuf);
        }
     }
