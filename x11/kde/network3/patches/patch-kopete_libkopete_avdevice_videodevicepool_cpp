$OpenBSD: patch-kopete_libkopete_avdevice_videodevicepool_cpp,v 1.1 2006/04/29 01:02:24 brad Exp $
--- kopete/libkopete/avdevice/videodevicepool.cpp.orig	Fri Mar 17 05:12:32 2006
+++ kopete/libkopete/avdevice/videodevicepool.cpp	Fri Apr 28 15:51:20 2006
@@ -36,6 +36,7 @@ namespace Kopete {
 namespace AV {
 
 VideoDevicePool *VideoDevicePool::s_self = NULL;
+__u64 VideoDevicePool::m_clients = 0;
 
 VideoDevicePool* VideoDevicePool::self()
 {
@@ -43,6 +44,8 @@ VideoDevicePool* VideoDevicePool::self()
 	if (s_self == NULL)
 	{
 		s_self = new VideoDevicePool;
+		if (s_self)
+			m_clients = 0;
 	}
 //	kdDebug() << "libkopete (avdevice): self() exited successfuly" << endl;
 	return s_self;
@@ -67,6 +70,7 @@ int VideoDevicePool::open()
 {
     /// @todo implement me
 
+	m_ready.lock();
 	if(!m_videodevice.size())
 	{
 		kdDebug() <<  k_funcinfo << "open(): No devices found. Must scan for available devices." << m_current_device << endl;
@@ -75,6 +79,7 @@ int VideoDevicePool::open()
 	if(!m_videodevice.size())
 	{
 		kdDebug() <<  k_funcinfo << "open(): No devices found. bailing out." << m_current_device << endl;
+		m_ready.unlock();
 		return EXIT_FAILURE;
 	}
 	if(m_current_device >= m_videodevice.size())
@@ -82,13 +87,15 @@ int VideoDevicePool::open()
 		kdDebug() <<  k_funcinfo << "open(): Device out of scope (" << m_current_device << "). Defaulting to the first one." << endl;
 		m_current_device = 0;
 	}
-loadConfig();
 	int isopen = m_videodevice[currentDevice()].open();
 	if ( isopen == EXIT_SUCCESS)
 	{
 		loadConfig(); // Temporary hack. The open() seems to clean the input parameters. Need to find a way to fix it.
 		
 	}
+	m_clients++;
+	kdDebug() << k_funcinfo << "Number of clients: " << m_clients << endl;
+	m_ready.unlock();
 	return isopen;
 }
 
@@ -188,6 +195,7 @@ int VideoDevicePool::close()
  */
 int VideoDevicePool::startCapturing()
 {
+	kdDebug() <<  k_funcinfo << "startCapturing() called." << endl;
 	if(m_videodevice.size())
 		return m_videodevice[currentDevice()].startCapturing();
 	return EXIT_FAILURE;
@@ -210,7 +218,10 @@ int VideoDevicePool::stopCapturing()
  */
 float VideoDevicePool::getBrightness()
 {
+  if (currentDevice() < m_videodevice.size() )
 	return m_videodevice[currentDevice()].getBrightness();
+  else
+	return 0;
 }
 
 /*!
@@ -218,7 +229,10 @@ float VideoDevicePool::getBrightness()
  */
 float VideoDevicePool::setBrightness(float brightness)
 {
-	return m_videodevice[currentDevice()].setBrightness(brightness);
+    if (currentDevice() < m_videodevice.size() )
+	  return m_videodevice[currentDevice()].setBrightness(brightness);
+	else
+	  return 0;
 }
 
 /*!
@@ -226,7 +240,10 @@ float VideoDevicePool::setBrightness(flo
  */
 float VideoDevicePool::getContrast()
 {
-	return m_videodevice[currentDevice()].getContrast();
+    if (currentDevice() < m_videodevice.size() )
+	  return m_videodevice[currentDevice()].getContrast();
+	else
+	  return 0;
 }
 
 /*!
@@ -234,7 +251,10 @@ float VideoDevicePool::getContrast()
  */
 float VideoDevicePool::setContrast(float contrast)
 {
-	return m_videodevice[currentDevice()].setContrast(contrast);
+    if (currentDevice() < m_videodevice.size() )
+	  return m_videodevice[currentDevice()].setContrast(contrast);
+	else
+	  return 0;
 }
 
 /*!
@@ -242,7 +262,10 @@ float VideoDevicePool::setContrast(float
  */
 float VideoDevicePool::getSaturation()
 {
-	return m_videodevice[currentDevice()].getSaturation();
+    if (currentDevice() < m_videodevice.size() )
+	  return m_videodevice[currentDevice()].getSaturation();
+	else
+	  return 0;
 }
 
 /*!
@@ -250,7 +273,10 @@ float VideoDevicePool::getSaturation()
  */
 float VideoDevicePool::setSaturation(float saturation)
 {
-	return m_videodevice[currentDevice()].setSaturation(saturation);
+    if (currentDevice() < m_videodevice.size() )
+	  return m_videodevice[currentDevice()].setSaturation(saturation);
+	else
+	  return 0;
 }
 
 /*!
@@ -258,7 +284,10 @@ float VideoDevicePool::setSaturation(flo
  */
 float VideoDevicePool::getWhiteness()
 {
-	return m_videodevice[currentDevice()].getWhiteness();
+    if (currentDevice() < m_videodevice.size() )
+	  return m_videodevice[currentDevice()].getWhiteness();
+	else
+	  return 0;
 }
 
 /*!
@@ -266,7 +295,10 @@ float VideoDevicePool::getWhiteness()
  */
 float VideoDevicePool::setWhiteness(float whiteness)
 {
-	return m_videodevice[currentDevice()].setWhiteness(whiteness);
+    if (currentDevice() < m_videodevice.size() )
+	  return m_videodevice[currentDevice()].setWhiteness(whiteness);
+	else
+	  return 0;
 }
 
 /*!
@@ -274,7 +306,10 @@ float VideoDevicePool::setWhiteness(floa
  */
 float VideoDevicePool::getHue()
 {
-	return m_videodevice[currentDevice()].getHue();
+    if (currentDevice() < m_videodevice.size() )
+	  return m_videodevice[currentDevice()].getHue();
+	else
+	  return 0;
 }
 
 /*!
@@ -282,7 +317,10 @@ float VideoDevicePool::getHue()
  */
 float VideoDevicePool::setHue(float hue)
 {
-	return m_videodevice[currentDevice()].setHue(hue);
+    if (currentDevice() < m_videodevice.size() )
+	  return m_videodevice[currentDevice()].setHue(hue);
+	else
+	  return 0;
 }
 
 /*!
@@ -349,6 +387,27 @@ bool VideoDevicePool::setImageAsMirror(b
 }
 
 /*!
+    \fn VideoDevicePool::getDisableMMap()
+ */
+bool VideoDevicePool::getDisableMMap()
+{
+	if(m_videodevice.size())
+		return m_videodevice[currentDevice()].getDisableMMap();
+	return false;
+}
+
+/*!
+    \fn VideoDevicePool::setDisableMMap(bool disablemmap)
+ */
+bool VideoDevicePool::setDisableMMap(bool disablemmap)
+{
+	kdDebug() <<  k_funcinfo << "VideoDevicePool::setDisableMMap(" << disablemmap << ") called." << endl;
+	if(m_videodevice.size())
+		return m_videodevice[currentDevice()].setDisableMMap(disablemmap);
+	return false;
+}
+
+/*!
     \fn VideoDevicePool::getWorkaroundBrokenDriver()
  */
 bool VideoDevicePool::getWorkaroundBrokenDriver()
@@ -473,7 +532,7 @@ int VideoDevicePool::setInputParameters(
 }
 
 /*!
-    \fn Kopete::AV::VideoDevicePool::fillInputKComboBox(KComboBox *combobox)
+    \fn Kopete::AV::VideoDevicePool::fillDeviceKComboBox(KComboBox *combobox)
  */
 int VideoDevicePool::fillDeviceKComboBox(KComboBox *combobox)
 {
@@ -518,6 +577,67 @@ int VideoDevicePool::fillInputKComboBox(
 }
 
 /*!
+    \fn Kopete::AV::VideoDevicePool::fillStandardKComboBox(KComboBox *combobox)
+ */
+int VideoDevicePool::fillStandardKComboBox(KComboBox *combobox)
+{
+    /// @todo implement me
+	kdDebug() <<  k_funcinfo << "fillInputKComboBox: Called." << endl;
+	combobox->clear();
+	if(m_videodevice.size())
+	{
+		if(m_videodevice[currentDevice()].inputs()>0)
+		{
+			for (unsigned int loop=0; loop < 25; loop++)
+			{
+				if ( (m_videodevice[currentDevice()].m_input[currentInput()].m_standards) & (1 << loop) )
+					combobox->insertItem(m_videodevice[currentDevice()].signalStandardName( 1 << loop));
+/*
+				case STANDARD_PAL_B1	: return V4L2_STD_PAL_B1;	break;
+				case STANDARD_PAL_G	: return V4L2_STD_PAL_G;	break;
+				case STANDARD_PAL_H	: return V4L2_STD_PAL_H;	break;
+				case STANDARD_PAL_I	: return V4L2_STD_PAL_I;	break;
+				case STANDARD_PAL_D	: return V4L2_STD_PAL_D;	break;
+				case STANDARD_PAL_D1	: return V4L2_STD_PAL_D1;	break;
+				case STANDARD_PAL_K	: return V4L2_STD_PAL_K;	break;
+				case STANDARD_PAL_M	: return V4L2_STD_PAL_M;	break;
+				case STANDARD_PAL_N	: return V4L2_STD_PAL_N;	break;
+				case STANDARD_PAL_Nc	: return V4L2_STD_PAL_Nc;	break;
+				case STANDARD_PAL_60	: return V4L2_STD_PAL_60;	break;
+				case STANDARD_NTSC_M	: return V4L2_STD_NTSC_M;	break;
+				case STANDARD_NTSC_M_JP	: return V4L2_STD_NTSC_M_JP;	break;
+				case STANDARD_NTSC_443	: return V4L2_STD_NTSC;		break; // Using workaround value because my videodev2.h header seems to not include this standard in struct __u64 v4l2_std_id
+				case STANDARD_SECAM_B	: return V4L2_STD_SECAM_B;	break;
+				case STANDARD_SECAM_D	: return V4L2_STD_SECAM_D;	break;
+				case STANDARD_SECAM_G	: return V4L2_STD_SECAM_G;	break;
+				case STANDARD_SECAM_H	: return V4L2_STD_SECAM_H;	break;
+				case STANDARD_SECAM_K	: return V4L2_STD_SECAM_K;	break;
+				case STANDARD_SECAM_K1	: return V4L2_STD_SECAM_K1;	break;
+				case STANDARD_SECAM_L	: return V4L2_STD_SECAM_L;	break;
+				case STANDARD_SECAM_LC	: return V4L2_STD_SECAM;	break; // Using workaround value because my videodev2.h header seems to not include this standard in struct __u64 v4l2_std_id
+				case STANDARD_ATSC_8_VSB	: return V4L2_STD_ATSC_8_VSB;	break; // ATSC/HDTV Standard officially not supported by V4L2 but exists in videodev2.h
+				case STANDARD_ATSC_16_VSB	: return V4L2_STD_ATSC_16_VSB;	break; // ATSC/HDTV Standard officially not supported by V4L2 but exists in videodev2.h
+				case STANDARD_PAL_BG	: return V4L2_STD_PAL_BG;	break;
+				case STANDARD_PAL_DK	: return V4L2_STD_PAL_DK;	break;
+				case STANDARD_PAL	: return V4L2_STD_PAL;		break;
+				case STANDARD_NTSC	: return V4L2_STD_NTSC;		break;
+				case STANDARD_SECAM_DK	: return V4L2_STD_SECAM_DK;	break;
+				case STANDARD_SECAM	: return V4L2_STD_SECAM;	break;
+				case STANDARD_525_60	: return V4L2_STD_525_60;	break;
+				case STANDARD_625_50	: return V4L2_STD_625_50;	break;
+				case STANDARD_ALL	: return V4L2_STD_ALL;		break;
+
+				combobox->insertItem(m_videodevice[currentDevice()].m_input[loop].name);
+				kdDebug() <<  k_funcinfo << "StandardKCombobox: Added input " << loop << ": " << m_videodevice[currentDevice()].m_input[loop].name << " (tuner: " << m_videodevice[currentDevice()].m_input[loop].hastuner << ")" << endl;*/
+			}
+			combobox->setCurrentItem(currentInput());
+			return EXIT_SUCCESS;
+		}
+	}
+	return EXIT_FAILURE;
+}
+
+/*!
     \fn Kopete::AV::VideoDevicePool::scanDevices()
  */
 int VideoDevicePool::scanDevices()
@@ -683,11 +803,12 @@ void VideoDevicePool::loadConfig()
 			const QString modelindex = QString::fromLocal8Bit ( "Model %1 Device %2")  .arg ((*vditerator).m_name ) .arg ((*vditerator).m_modelindex);
 			if(modelindex == currentdevice)
 			{
-				m_current_device = vditerator - m_videodevice.begin();
+				m_current_device = std::distance (m_videodevice.begin(), vditerator);
 //				kdDebug() << k_funcinfo << "This place will be used to set " << modelindex << " as the current device ( " << std::distance(m_videodevice.begin(), vditerator ) << " )." << endl;
 			}
 			const QString name                = config->readEntry((QString::fromLocal8Bit ( "Model %1 Device %2 Name")  .arg ((*vditerator).m_name ) .arg ((*vditerator).m_modelindex)), (*vditerator).m_model);
 			const int currentinput            = config->readNumEntry((QString::fromLocal8Bit ( "Model %1 Device %2 Current input")  .arg ((*vditerator).m_name ) .arg ((*vditerator).m_modelindex)), 0);
+			const bool disablemmap            = config->readBoolEntry((QString::fromLocal8Bit ( "Model %1 Device %2 DisableMMap")  .arg ((*vditerator).m_model ) .arg ((*vditerator).m_modelindex)), false );
 			const bool workaroundbrokendriver = config->readBoolEntry((QString::fromLocal8Bit ( "Model %1 Device %2 WorkaroundBrokenDriver")  .arg ((*vditerator).m_model ) .arg ((*vditerator).m_modelindex)), false );
 			kdDebug() << k_funcinfo << "Device name: " << name << endl;
 			kdDebug() << k_funcinfo << "Device current input: " << currentinput << endl;
@@ -699,8 +820,8 @@ void VideoDevicePool::loadConfig()
 				const float brightness = config->readDoubleNumEntry((QString::fromLocal8Bit ( "Model %1 Device %2 Input %3 Brightness").arg ((*vditerator).m_model ) .arg ((*vditerator).m_modelindex) .arg (input)) , 0.5 );
 				const float contrast   = config->readDoubleNumEntry((QString::fromLocal8Bit ( "Model %1 Device %2 Input %3 Contrast")  .arg ((*vditerator).m_model ) .arg ((*vditerator).m_modelindex) .arg (input)) , 0.5 );
 				const float saturation = config->readDoubleNumEntry((QString::fromLocal8Bit ( "Model %1 Device %2 Input %3 Saturation").arg ((*vditerator).m_model ) .arg ((*vditerator).m_modelindex) .arg (input)) , 0.5 );
-				const float whiteness  = config->readDoubleNumEntry((QString::fromLocal8Bit ( "Model %1 Device %2 Input %3 Whiteness")  .arg ((*vditerator).m_model ) .arg ((*vditerator).m_modelindex) .arg (input)) , 0.5 );
-				const float hue        = config->readDoubleNumEntry((QString::fromLocal8Bit ( "Model %1 Device %2 Input %3 Hue")       .arg ((*vditerator).m_model ) .arg ((*vditerator).m_modelindex) .arg (input)) , 0.0 );
+				const float whiteness  = config->readDoubleNumEntry((QString::fromLocal8Bit ( "Model %1 Device %2 Input %3 Whiteness") .arg ((*vditerator).m_model ) .arg ((*vditerator).m_modelindex) .arg (input)) , 0.5 );
+				const float hue        = config->readDoubleNumEntry((QString::fromLocal8Bit ( "Model %1 Device %2 Input %3 Hue")       .arg ((*vditerator).m_model ) .arg ((*vditerator).m_modelindex) .arg (input)) , 0.5 );
 				const bool  autobrightnesscontrast = config->readBoolEntry((QString::fromLocal8Bit ( "Model %1 Device %2 Input %3 AutoBrightnessContrast") .arg ((*vditerator).m_model ) .arg ((*vditerator).m_modelindex) .arg (input)) , false );
 				const bool  autocolorcorrection    = config->readBoolEntry((QString::fromLocal8Bit ( "Model %1 Device %2 Input %3 AutoColorCorrection")    .arg ((*vditerator).m_model ) .arg ((*vditerator).m_modelindex) .arg (input)) , false );
 				const bool  imageasmirror          = config->readBoolEntry((QString::fromLocal8Bit ( "Model %1 Device %2 Input %3 mageAsMirror")           .arg ((*vditerator).m_model ) .arg ((*vditerator).m_modelindex) .arg (input)) , false );
@@ -759,9 +880,11 @@ void VideoDevicePool::saveConfig()
 // Stores current input for the given video device
 			const QString name                   = QString::fromLocal8Bit ( "Model %1 Device %2 Name")  .arg ((*vditerator).m_model ) .arg ((*vditerator).m_modelindex);
 			const QString currentinput           = QString::fromLocal8Bit ( "Model %1 Device %2 Current input")  .arg ((*vditerator).m_model ) .arg ((*vditerator).m_modelindex);
+			const QString disablemmap            = QString::fromLocal8Bit ( "Model %1 Device %2 DisableMMap") .arg ((*vditerator).m_model ) .arg ((*vditerator).m_modelindex);
 			const QString workaroundbrokendriver = QString::fromLocal8Bit ( "Model %1 Device %2 WorkaroundBrokenDriver") .arg ((*vditerator).m_model ) .arg ((*vditerator).m_modelindex);
 			config->writeEntry( name,                   (*vditerator).m_name);
 			config->writeEntry( currentinput,           (*vditerator).currentInput());
+			config->writeEntry( disablemmap,            (*vditerator).getDisableMMap());
 			config->writeEntry( workaroundbrokendriver, (*vditerator).getWorkaroundBrokenDriver());
 
 			for (size_t input = 0 ; input < (*vditerator).m_input.size(); input++)
@@ -769,7 +892,7 @@ void VideoDevicePool::saveConfig()
 				kdDebug() << "Model:" << (*vditerator).m_model << ":Index:" << (*vditerator).m_modelindex << ":Input:" << input << ":Brightness: " << (*vditerator).m_input[input].getBrightness() << endl;
 				kdDebug() << "Model:" << (*vditerator).m_model << ":Index:" << (*vditerator).m_modelindex << ":Input:" << input << ":Contrast  : " << (*vditerator).m_input[input].getContrast()   << endl;
 				kdDebug() << "Model:" << (*vditerator).m_model << ":Index:" << (*vditerator).m_modelindex << ":Input:" << input << ":Saturation: " << (*vditerator).m_input[input].getSaturation() << endl;
-				kdDebug() << "Model:" << (*vditerator).m_model << ":Index:" << (*vditerator).m_modelindex << ":Input:" << input << ":Whiteness : " << (*vditerator).m_input[input].getWhiteness() << endl;
+				kdDebug() << "Model:" << (*vditerator).m_model << ":Index:" << (*vditerator).m_modelindex << ":Input:" << input << ":Whiteness : " << (*vditerator).m_input[input].getWhiteness()  << endl;
 				kdDebug() << "Model:" << (*vditerator).m_model << ":Index:" << (*vditerator).m_modelindex << ":Input:" << input << ":Hue       : " << (*vditerator).m_input[input].getHue()        << endl;
 				kdDebug() << "Model:" << (*vditerator).m_model << ":Index:" << (*vditerator).m_modelindex << ":Input:" << input << ":Automatic brightness / contrast: " << (*vditerator).m_input[input].getAutoBrightnessContrast() << endl;
 				kdDebug() << "Model:" << (*vditerator).m_model << ":Index:" << (*vditerator).m_modelindex << ":Input:" << input << ":Automatic color correction     : " << (*vditerator).m_input[input].getAutoColorCorrection() << endl;
