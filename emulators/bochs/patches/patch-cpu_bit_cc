$OpenBSD: patch-cpu_bit_cc,v 1.1 2001/02/02 16:59:07 todd Exp $
--- cpu/bit.cc.orig	Sat Mar 25 21:39:07 2000
+++ cpu/bit.cc	Tue Oct 17 12:04:00 2000
@@ -32,7 +32,7 @@
 BX_CPU_C::SETO_Eb(BxInstruction_t *i)
 {
 #if BX_CPU_LEVEL < 3
-  bx_panic("SETO: not available on < 386\n");
+  bio->panic("SETO: not available on < 386\n");
 #else
   Bit8u result_8;
 
@@ -56,7 +56,7 @@ BX_CPU_C::SETO_Eb(BxInstruction_t *i)
 BX_CPU_C::SETNO_Eb(BxInstruction_t *i)
 {
 #if BX_CPU_LEVEL < 3
-  bx_panic("SETNO: not available on < 386\n");
+  bio->panic("SETNO: not available on < 386\n");
 #else
   Bit8u result_8;
 
@@ -80,7 +80,7 @@ BX_CPU_C::SETNO_Eb(BxInstruction_t *i)
 BX_CPU_C::SETB_Eb(BxInstruction_t *i)
 {
 #if BX_CPU_LEVEL < 3
-  bx_panic("SETB: not available on < 386\n");
+  bio->panic("SETB: not available on < 386\n");
 #else
   Bit8u result_8;
 
@@ -104,7 +104,7 @@ BX_CPU_C::SETB_Eb(BxInstruction_t *i)
 BX_CPU_C::SETNB_Eb(BxInstruction_t *i)
 {
 #if BX_CPU_LEVEL < 3
-  bx_panic("SETNB: not available on < 386\n");
+  bio->panic("SETNB: not available on < 386\n");
 #else
   Bit8u result_8;
 
@@ -128,7 +128,7 @@ BX_CPU_C::SETNB_Eb(BxInstruction_t *i)
 BX_CPU_C::SETZ_Eb(BxInstruction_t *i)
 {
 #if BX_CPU_LEVEL < 3
-  bx_panic("SETZ: not available on < 386\n");
+  bio->panic("SETZ: not available on < 386\n");
 #else
   Bit8u result_8;
 
@@ -152,7 +152,7 @@ BX_CPU_C::SETZ_Eb(BxInstruction_t *i)
 BX_CPU_C::SETNZ_Eb(BxInstruction_t *i)
 {
 #if BX_CPU_LEVEL < 3
-  bx_panic("SETNZ: not available on < 386\n");
+  bio->panic("SETNZ: not available on < 386\n");
 #else
   Bit8u result_8;
 
@@ -176,7 +176,7 @@ BX_CPU_C::SETNZ_Eb(BxInstruction_t *i)
 BX_CPU_C::SETBE_Eb(BxInstruction_t *i)
 {
 #if BX_CPU_LEVEL < 3
-  bx_panic("SETBE: not available on < 386\n");
+  bio->panic("SETBE: not available on < 386\n");
 #else
   Bit8u result_8;
 
@@ -200,7 +200,7 @@ BX_CPU_C::SETBE_Eb(BxInstruction_t *i)
 BX_CPU_C::SETNBE_Eb(BxInstruction_t *i)
 {
 #if BX_CPU_LEVEL < 3
-  bx_panic("SETNBE: not available on < 386\n");
+  bio->panic("SETNBE: not available on < 386\n");
 #else
   Bit8u result_8;
 
@@ -224,7 +224,7 @@ BX_CPU_C::SETNBE_Eb(BxInstruction_t *i)
 BX_CPU_C::SETS_Eb(BxInstruction_t *i)
 {
 #if BX_CPU_LEVEL < 3
-  bx_panic("SETS: not available on < 386\n");
+  bio->panic("SETS: not available on < 386\n");
 #else
   Bit8u result_8;
 
@@ -248,7 +248,7 @@ BX_CPU_C::SETS_Eb(BxInstruction_t *i)
 BX_CPU_C::SETNS_Eb(BxInstruction_t *i)
 {
 #if BX_CPU_LEVEL < 3
-  bx_panic("SETNL: not available on < 386\n");
+  bio->panic("SETNL: not available on < 386\n");
 #else
   Bit8u result_8;
 
@@ -272,7 +272,7 @@ BX_CPU_C::SETNS_Eb(BxInstruction_t *i)
 BX_CPU_C::SETP_Eb(BxInstruction_t *i)
 {
 #if BX_CPU_LEVEL < 3
-  bx_panic("SETP: not available on < 386\n");
+  bio->panic("SETP: not available on < 386\n");
 #else
   Bit8u result_8;
 
@@ -296,7 +296,7 @@ BX_CPU_C::SETP_Eb(BxInstruction_t *i)
 BX_CPU_C::SETNP_Eb(BxInstruction_t *i)
 {
 #if BX_CPU_LEVEL < 3
-  bx_panic("SETNP: not available on < 386\n");
+  bio->panic("SETNP: not available on < 386\n");
 #else
   Bit8u result_8;
 
@@ -320,7 +320,7 @@ BX_CPU_C::SETNP_Eb(BxInstruction_t *i)
 BX_CPU_C::SETL_Eb(BxInstruction_t *i)
 {
 #if BX_CPU_LEVEL < 3
-  bx_panic("SETL: not available on < 386\n");
+  bio->panic("SETL: not available on < 386\n");
 #else
   Bit8u result_8;
 
@@ -344,7 +344,7 @@ BX_CPU_C::SETL_Eb(BxInstruction_t *i)
 BX_CPU_C::SETNL_Eb(BxInstruction_t *i)
 {
 #if BX_CPU_LEVEL < 3
-  bx_panic("SETNL: not available on < 386\n");
+  bio->panic("SETNL: not available on < 386\n");
 #else
   Bit8u result_8;
 
@@ -368,7 +368,7 @@ BX_CPU_C::SETNL_Eb(BxInstruction_t *i)
 BX_CPU_C::SETLE_Eb(BxInstruction_t *i)
 {
 #if BX_CPU_LEVEL < 3
-  bx_panic("SETLE: not available on < 386\n");
+  bio->panic("SETLE: not available on < 386\n");
 #else
   Bit8u result_8;
 
@@ -392,7 +392,7 @@ BX_CPU_C::SETLE_Eb(BxInstruction_t *i)
 BX_CPU_C::SETNLE_Eb(BxInstruction_t *i)
 {
 #if BX_CPU_LEVEL < 3
-  bx_panic("SETNLE: not available on < 386\n");
+  bio->panic("SETNLE: not available on < 386\n");
 #else
   Bit8u result_8;
 
@@ -417,7 +417,7 @@ BX_CPU_C::SETNLE_Eb(BxInstruction_t *i)
 BX_CPU_C::BSF_GvEv(BxInstruction_t *i)
 {
 #if BX_CPU_LEVEL < 3
-  bx_panic("BSF_GvEv(): not supported on < 386\n");
+  bio->panic("BSF_GvEv(): not supported on < 386\n");
 #else
 
 
@@ -485,7 +485,7 @@ BX_CPU_C::BSF_GvEv(BxInstruction_t *i)
 BX_CPU_C::BSR_GvEv(BxInstruction_t *i)
 {
 #if BX_CPU_LEVEL < 3
-  bx_panic("BSR_GvEv(): not supported on < 386\n");
+  bio->panic("BSR_GvEv(): not supported on < 386\n");
 #else
 
 
@@ -565,7 +565,7 @@ BX_CPU_C::BSWAP_EAX(BxInstruction_t *i)
 
   EAX = (b0<<24) | (b1<<16) | (b2<<8) | b3;
 #else
-  bx_panic("BSWAP_EAX: not implemented CPU <= 3\n");
+  bio->panic("BSWAP_EAX: not implemented CPU <= 3\n");
 #endif
 }
 
@@ -584,7 +584,7 @@ BX_CPU_C::BSWAP_ECX(BxInstruction_t *i)
 
   ECX = (b0<<24) | (b1<<16) | (b2<<8) | b3;
 #else
-  bx_panic("BSWAP_ECX: not implemented CPU <= 3\n");
+  bio->panic("BSWAP_ECX: not implemented CPU <= 3\n");
 #endif
 }
   void
@@ -602,7 +602,7 @@ BX_CPU_C::BSWAP_EDX(BxInstruction_t *i)
 
   EDX = (b0<<24) | (b1<<16) | (b2<<8) | b3;
 #else
-  bx_panic("BSWAP_EDX: not implemented CPU <= 3\n");
+  bio->panic("BSWAP_EDX: not implemented CPU <= 3\n");
 #endif
 }
   void
@@ -620,7 +620,7 @@ BX_CPU_C::BSWAP_EBX(BxInstruction_t *i)
 
   EBX = (b0<<24) | (b1<<16) | (b2<<8) | b3;
 #else
-  bx_panic("BSWAP_EBX: not implemented CPU <= 3\n");
+  bio->panic("BSWAP_EBX: not implemented CPU <= 3\n");
 #endif
 }
   void
@@ -638,7 +638,7 @@ BX_CPU_C::BSWAP_ESP(BxInstruction_t *i)
 
   ESP = (b0<<24) | (b1<<16) | (b2<<8) | b3;
 #else
-  bx_panic("BSWAP_ESP: not implemented CPU <= 3\n");
+  bio->panic("BSWAP_ESP: not implemented CPU <= 3\n");
 #endif
 }
   void
@@ -656,7 +656,7 @@ BX_CPU_C::BSWAP_EBP(BxInstruction_t *i)
 
   EBP = (b0<<24) | (b1<<16) | (b2<<8) | b3;
 #else
-  bx_panic("BSWAP_EBP: not implemented CPU <= 3\n");
+  bio->panic("BSWAP_EBP: not implemented CPU <= 3\n");
 #endif
 }
   void
@@ -674,7 +674,7 @@ BX_CPU_C::BSWAP_ESI(BxInstruction_t *i)
 
   ESI = (b0<<24) | (b1<<16) | (b2<<8) | b3;
 #else
-  bx_panic("BSWAP_ESI: not implemented CPU <= 3\n");
+  bio->panic("BSWAP_ESI: not implemented CPU <= 3\n");
 #endif
 }
   void
@@ -692,7 +692,7 @@ BX_CPU_C::BSWAP_EDI(BxInstruction_t *i)
 
   EDI = (b0<<24) | (b1<<16) | (b2<<8) | b3;
 #else
-  bx_panic("BSWAP_EDI: not implemented CPU <= 3\n");
+  bio->panic("BSWAP_EDI: not implemented CPU <= 3\n");
 #endif
 }
 
@@ -701,7 +701,7 @@ BX_CPU_C::BSWAP_EDI(BxInstruction_t *i)
 BX_CPU_C::BT_EvGv(BxInstruction_t *i)
 {
 #if BX_CPU_LEVEL < 3
-  bx_panic("BT_EvGv: not available on <386\n");
+  bio->panic("BT_EvGv: not available on <386\n");
 #else
   Bit32u op1_addr;
 
@@ -761,7 +761,7 @@ BX_CPU_C::BT_EvGv(BxInstruction_t *i)
 BX_CPU_C::BTS_EvGv(BxInstruction_t *i)
 {
 #if BX_CPU_LEVEL < 3
-  bx_panic("BTS_EvGv: not available on <386\n");
+  bio->panic("BTS_EvGv: not available on <386\n");
 #else
   Bit32u op1_addr;
 
@@ -839,7 +839,7 @@ BX_CPU_C::BTS_EvGv(BxInstruction_t *i)
 BX_CPU_C::BTR_EvGv(BxInstruction_t *i)
 {
 #if BX_CPU_LEVEL < 3
-  bx_panic("BTR_EvGv: not available on <386\n");
+  bio->panic("BTR_EvGv: not available on <386\n");
 #else
   Bit32u op1_addr;
 
@@ -920,7 +920,7 @@ BX_CPU_C::BTR_EvGv(BxInstruction_t *i)
 BX_CPU_C::BTC_EvGv(BxInstruction_t *i)
 {
 #if BX_CPU_LEVEL < 3
-  bx_panic("BTC_EvGv: not available on <386\n");
+  bio->panic("BTC_EvGv: not available on <386\n");
 #else
   Bit32u op1_addr;
 
@@ -994,7 +994,7 @@ BX_CPU_C::BTC_EvGv(BxInstruction_t *i)
 BX_CPU_C::BT_EvIb(BxInstruction_t *i)
 {
 #if BX_CPU_LEVEL < 3
-  bx_panic("BT_EvIb: not available on <386\n");
+  bio->panic("BT_EvIb: not available on <386\n");
 #else
 
   if (i->os_32) { /* 32 bit operand size mode */
@@ -1042,7 +1042,7 @@ BX_CPU_C::BT_EvIb(BxInstruction_t *i)
 BX_CPU_C::BTS_EvIb(BxInstruction_t *i)
 {
 #if BX_CPU_LEVEL < 3
-  bx_panic("BTS_EvIb: not available on <386\n");
+  bio->panic("BTS_EvIb: not available on <386\n");
 #else
 
   if (i->os_32) { /* 32 bit operand size mode */
@@ -1110,7 +1110,7 @@ BX_CPU_C::BTS_EvIb(BxInstruction_t *i)
 BX_CPU_C::BTC_EvIb(BxInstruction_t *i)
 {
 #if BX_CPU_LEVEL < 3
-  bx_panic("BTC_EvIb: not available on <386\n");
+  bio->panic("BTC_EvIb: not available on <386\n");
 #else
 
   if (i->os_32) { /* 32 bit operand size mode */
@@ -1181,7 +1181,7 @@ BX_CPU_C::BTC_EvIb(BxInstruction_t *i)
 BX_CPU_C::BTR_EvIb(BxInstruction_t *i)
 {
 #if BX_CPU_LEVEL < 3
-  bx_panic("BTR_EvIb: not available on <386\n");
+  bio->panic("BTR_EvIb: not available on <386\n");
 #else
 
   if (i->os_32) { /* 32 bit operand size mode */
