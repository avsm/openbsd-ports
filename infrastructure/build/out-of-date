#!/usr/bin/perl

# $OpenBSD: out-of-date,v 1.11 2005/10/01 16:36:03 espie Exp $
#
# Copyright (c) 2005 Bernd Ahlers <bernd@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;
use OpenBSD::PackageInfo;
use OpenBSD::PackingList;
use OpenBSD::PackageName;
use OpenBSD::ProgressMeter;

sub collect_installed
{
	my $pkg = {};
	for my $name (installed_packages(1)) {
		my ($stem, $version) = OpenBSD::PackageName::splitname($name);
		my $plist = OpenBSD::PackingList->from_installation($name,
		    \&OpenBSD::PackingList::UpdateInfoOnly);

		$pkg->{$stem}->{version}   = $version;
		$pkg->{$stem}->{subdir}    = $plist->{extrainfo}->{subdir};
		$pkg->{$stem}->{signature} = $plist->signature();

		$pkg->{$stem}->{subdir} =~ s/mystuff\///;
		$pkg->{$stem}->{subdir} =~ s/\/usr\/ports\///;
	}
	return $pkg;
}

sub check_existing_ports
{
	my ($pkg, $portsdir, $subdirs, $notfound) = @_;
	
	for my $stem (keys %$pkg) {

		my ($dir) = split(/,/, $pkg->{$stem}->{subdir});

		if (-d "$portsdir/$dir") {
			push @$subdirs, $pkg->{$stem}->{subdir};
		} else {
			push(@$notfound, $pkg->{$stem}->{subdir});
		}
	}
}

sub collect_port_versions
{
	my $portsdir = shift;

	my $cmd = "cd $portsdir && SUBDIR=\"".join(' ', @_)."\" ECHO_MSG=: REPORT_PROBLEM=true make print-package-signature |";

	my $count = 0;
	my $port     = {};
	my $total = scalar @_;
	open(my $fh, $cmd);
	my $old = select $fh; 
	$| = 1; 
	select STDERR;
	OpenBSD::ProgressMeter::enable();
	OpenBSD::ProgressMeter::set_header("Collecting port versions");
	while (<$fh>) {
		chomp;
		$count++;
		OpenBSD::ProgressMeter::show($count, $total);
		next unless $_;
		my ($name) = split(/,/, $_);
		my ($stem, $version) = OpenBSD::PackageName::splitname($name);

		$port->{$stem}->{version}   = $version;
		$port->{$stem}->{signature} = $_;
	}
	close($fh);
	OpenBSD::ProgressMeter::next();
	select $old;
	return $port;
}

sub find_outdated
{
	my ($pkg, $port) = @_;
	my @output = ();

	for my $stem (keys %{$pkg}) {
		next unless $port->{$stem};

		next if $pkg->{$stem}->{signature} eq $port->{$stem}->{signature};
		push(@output, sprintf("%-40s # %s -> %s\n",
		    $pkg->{$stem}->{subdir}, $pkg->{$stem}->{version},
		    $port->{$stem}->{version}));
	}
	return @output;
}

my $portsdir = $ENV{PORTSDIR} || "/usr/ports";

print STDERR "Collecting installed packages\n";
my $pkg = collect_installed();

my @subdirs  = ();
my @notfound = ();
check_existing_ports($pkg, $portsdir, \@subdirs, \@notfound);

my $port = collect_port_versions($portsdir, @subdirs);
my @output = find_outdated($pkg, $port);

print STDERR "Outdated ports:\n\n";
print $_ for sort @output;
print STDERR "\n";

if (@notfound > 0) {
	print STDERR "Ports that can't be found in the official ports tree:\n";
	for my $pkg (sort @notfound) {
		print STDERR "  ", $pkg, "\n";
	}
}
