--- ksysguard/ksysguardd/FreeBSD/Memory.c.orig	Fri Jul 28 01:59:28 2000
+++ ksysguard/ksysguardd/FreeBSD/Memory.c	Tue Nov 13 10:00:49 2001
@@ -29,7 +29,9 @@
 
 #include <sys/param.h>
 #include <sys/sysctl.h>
+#ifndef __OpenBSD__
 #include <vm/vm_param.h>
+#endif
 #include <sys/vmmeter.h>
 #include <string.h>
 #include <unistd.h>
@@ -67,7 +69,13 @@ updateMemory(void)
         char buf[256];
 
         len = sizeof (Total);
+#ifdef __OpenBSD__
+        mib[0] = CTL_HW;
+        mib[1] = HW_PHYSMEM;
+        sysctl(mib, 2, &Total, &len, NULL, 0);
+#else
         sysctlbyname("hw.physmem", &Total, &len, NULL, 0);
+#endif
         Total /= 1024;
 
         /* Q&D hack for swap display. Borrowed from xsysinfo-1.4 */
@@ -93,20 +101,30 @@ updateMemory(void)
 
 
         len = sizeof (Buffers);
+#ifndef __OpenBSD__
         if ((sysctlbyname("vfs.bufspace", &Buffers, &len, NULL, 0) == -1) || !len)
+#endif
                 Buffers = 0; /* Doesn't work under FreeBSD v2.2.x */
         Buffers /= 1024;
 
 
         len = sizeof (Cached);
+#ifndef __OpenBSD__
         if ((sysctlbyname("vm.stats.vm.v_cache_count", &Cached, &len, NULL, 0) == -1) || !len)
+#endif
                 Cached = 0; /* Doesn't work under FreeBSD v2.2.x */
         Cached *= getpagesize() / 1024;
 
 
 	/* initializes the pointer to the vmmeter struct */
 	len = sizeof (p);
+#ifdef __OpenBSD__
+        mib[0] = CTL_VM;
+        mib[1] = VM_METER;
+        sysctl(mib, 2, &p, &len, NULL, 0);
+#else
 	sysctlbyname("vm.vmmeter", &p, &len, NULL, 0);
+#endif
         MFree = p.t_free * getpagesize() / 1024;
         Used = p.t_arm * getpagesize() / 1024 + Buffers + Cached;
 
