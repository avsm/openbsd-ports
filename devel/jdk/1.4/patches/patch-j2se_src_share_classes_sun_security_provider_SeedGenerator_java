$OpenBSD: patch-j2se_src_share_classes_sun_security_provider_SeedGenerator_java,v 1.1.1.1 2004/12/21 04:01:05 kurt Exp $
--- j2se/src/share/classes/sun/security/provider/SeedGenerator.java.orig	Wed Oct 13 17:03:51 2004
+++ j2se/src/share/classes/sun/security/provider/SeedGenerator.java	Wed Oct 13 17:05:45 2004
@@ -30,7 +30,7 @@ package sun.security.provider;
  * machine dependent, some not. This information is then hashed together
  * with the 20 seed bytes.
  * <P> The alternative to the above approach is to acquire seed material
- * from an entropy gathering device, such as /dev/random. This can be
+ * from an entropy gathering device, such as /dev/srandom. This can be
  * accomplished by setting the value of the "securerandom.source"
  * security property (in the Java security properties file) to a URL
  * specifying the location of the entropy gathering device.
@@ -62,7 +62,7 @@ abstract class SeedGenerator {
     private final static String PROP_EGD = "java.security.egd";
     private final static String PROP_RNDSOURCE = "securerandom.source";
 
-    final static String URL_DEV_RANDOM = "file:/dev/random";
+    final static String URL_DEV_RANDOM = "file:/dev/srandom";
 
     // Static initializer to hook in selected or best performing generator
     static {
@@ -82,13 +82,13 @@ abstract class SeedGenerator {
 		});
 
 	// Try the URL specifying the source
-	// e.g. file:/dev/random
+	// e.g. file:/dev/srandom
 	//
-	// The URL file:/dev/random is used to indicate the SeedGenerator
+	// The URL file:/dev/srandom is used to indicate the SeedGenerator
 	// using OS support, if available.
 	// On Windows, the causes MS CryptoAPI to be used.
 	// On Solaris and Linux, this is the identical to using
-	// URLSeedGenerator to read from /dev/random
+	// URLSeedGenerator to read from /dev/srandom
 
 	if (egdSource.equals(URL_DEV_RANDOM)) {
 	    try {
