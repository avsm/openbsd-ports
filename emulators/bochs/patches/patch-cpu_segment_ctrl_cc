$OpenBSD: patch-cpu_segment_ctrl_cc,v 1.1 2001/02/02 16:59:09 todd Exp $
--- cpu/segment_ctrl.cc.orig	Sat Mar 25 21:39:09 2000
+++ cpu/segment_ctrl.cc	Tue Oct 17 12:04:01 2000
@@ -40,7 +40,7 @@ BX_CPU_C::LES_GvMp(BxInstruction_t *i)
 {
   if (i->mod == 0xc0) {
     // (BW) NT seems to use this when booting.
-    bx_printf("invalid use of LES, must use memory reference!\n");
+    bio->printf("invalid use of LES, must use memory reference!\n");
     UndefinedOpcode(i);
     }
 
@@ -74,7 +74,7 @@ BX_CPU_C::LES_GvMp(BxInstruction_t *i)
 BX_CPU_C::LDS_GvMp(BxInstruction_t *i)
 {
   if (i->mod == 0xc0) {
-    bx_panic("invalid use of LDS, must use memory reference!\n");
+    bio->panic("invalid use of LDS, must use memory reference!\n");
     UndefinedOpcode(i);
     }
 
@@ -108,11 +108,11 @@ BX_CPU_C::LDS_GvMp(BxInstruction_t *i)
 BX_CPU_C::LFS_GvMp(BxInstruction_t *i)
 {
 #if BX_CPU_LEVEL < 3
-  bx_panic("lfs_gvmp: not supported on 8086\n");
+  bio->panic("lfs_gvmp: not supported on 8086\n");
 #else /* 386+ */
 
   if (i->mod == 0xc0) {
-    bx_panic("invalid use of LFS, must use memory reference!\n");
+    bio->panic("invalid use of LFS, must use memory reference!\n");
     UndefinedOpcode(i);
     }
 
@@ -145,11 +145,11 @@ BX_CPU_C::LFS_GvMp(BxInstruction_t *i)
 BX_CPU_C::LGS_GvMp(BxInstruction_t *i)
 {
 #if BX_CPU_LEVEL < 3
-  bx_panic("lgs_gvmp: not supported on 8086\n");
+  bio->panic("lgs_gvmp: not supported on 8086\n");
 #else /* 386+ */
 
   if (i->mod == 0xc0) {
-    bx_panic("invalid use of LGS, must use memory reference!\n");
+    bio->panic("invalid use of LGS, must use memory reference!\n");
     UndefinedOpcode(i);
     }
 
@@ -182,11 +182,11 @@ BX_CPU_C::LGS_GvMp(BxInstruction_t *i)
 BX_CPU_C::LSS_GvMp(BxInstruction_t *i)
 {
 #if BX_CPU_LEVEL < 3
-  bx_panic("lss_gvmp: not supported on 8086\n");
+  bio->panic("lss_gvmp: not supported on 8086\n");
 #else /* 386+ */
 
   if (i->mod == 0xc0) {
-    bx_panic("invalid use of LSS, must use memory reference!\n");
+    bio->panic("invalid use of LSS, must use memory reference!\n");
     UndefinedOpcode(i);
     }
 
