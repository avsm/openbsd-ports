$OpenBSD: patch-src_combined_ffmpeg_ff_video_decoder_c,v 1.6 2011/10/09 20:45:07 sthen Exp $

- Eliminate use of old FFmpeg APIs.
- RV30 & RV40 support.
- Fixed multithreaded decoding with lavc >= 52.112.0.
- VC-1: scan for extradata (sequence header) from preview buffers.
- Do not require preview buffers for MPEG1/2.

--- src/combined/ffmpeg/ff_video_decoder.c.orig	Wed Mar 10 14:07:15 2010
+++ src/combined/ffmpeg/ff_video_decoder.c	Sun Oct  2 15:47:43 2011
@@ -58,6 +58,18 @@
 
 #define ENABLE_DIRECT_RENDERING
 
+#if LIBAVCODEC_VERSION_MAJOR >= 53 || (LIBAVCODEC_VERSION_MAJOR == 52 && LIBAVCODEC_VERSION_MINOR >= 32)
+#  define AVVIDEO 2
+#else
+#  define AVVIDEO 1
+#  define pp_context	pp_context_t
+#  define pp_mode	pp_mode_t
+#endif
+
+#if LIBAVCODEC_VERSION_MAJOR >= 53 || (LIBAVCODEC_VERSION_MAJOR == 52 && LIBAVCODEC_VERSION_MINOR >= 112)
+#  define DEPRECATED_AVCODEC_THREAD_INIT 1
+#endif
+
 /* reordered_opaque appeared in libavcodec 51.68.0 */
 #define AVCODEC_HAS_REORDERED_OPAQUE
 #if LIBAVCODEC_VERSION_INT < 0x334400
@@ -116,8 +128,8 @@ struct ff_video_decoder_s {
 
   int               pp_quality;
   int               pp_flags;
-  pp_context_t     *pp_context;
-  pp_mode_t        *pp_mode;
+  pp_context       *our_context;
+  pp_mode          *our_mode;
 
   /* mpeg-es parsing */
   mpeg_parser_t    *mpeg_parser;
@@ -321,6 +333,10 @@ static void init_video_codec (ff_video_decoder_t *this
     this->context->flags |= CODEC_FLAG_EMU_EDGE;
   }
 
+  /* TJ. without this, it wont work at all on my machine */
+  this->context->codec_id = this->codec->id;
+  this->context->codec_type = this->codec->type;
+
   if (this->class->choose_speed_over_accuracy)
     this->context->flags2 |= CODEC_FLAG2_FAST;
 
@@ -353,7 +369,10 @@ static void init_video_codec (ff_video_decoder_t *this
 
   if (this->class->thread_count > 1) {
     if (this->codec->id != CODEC_ID_SVQ3
-        && avcodec_thread_init(this->context, this->class->thread_count) != -1)
+#ifndef DEPRECATED_AVCODEC_THREAD_INIT
+	&& avcodec_thread_init(this->context, this->class->thread_count) != -1
+#endif
+	)
       this->context->thread_count = this->class->thread_count;
   }
 
@@ -444,23 +463,23 @@ static void pp_change_quality (ff_video_decoder_t *thi
   this->pp_quality = this->class->pp_quality;
 
   if(this->pp_available && this->pp_quality) {
-    if(!this->pp_context && this->context)
-      this->pp_context = pp_get_context(this->context->width, this->context->height,
+    if(!this->our_context && this->context)
+      this->our_context = pp_get_context(this->context->width, this->context->height,
                                         this->pp_flags);
-    if(this->pp_mode)
-      pp_free_mode(this->pp_mode);
+    if(this->our_mode)
+      pp_free_mode(this->our_mode);
 
-    this->pp_mode = pp_get_mode_by_name_and_quality("hb:a,vb:a,dr:a",
+    this->our_mode = pp_get_mode_by_name_and_quality("hb:a,vb:a,dr:a",
                                                     this->pp_quality);
   } else {
-    if(this->pp_mode) {
-      pp_free_mode(this->pp_mode);
-      this->pp_mode = NULL;
+    if(this->our_mode) {
+      pp_free_mode(this->our_mode);
+      this->our_mode = NULL;
     }
 
-    if(this->pp_context) {
-      pp_free_context(this->pp_context);
-      this->pp_context = NULL;
+    if(this->our_context) {
+      pp_free_context(this->our_context);
+      this->our_context = NULL;
     }
   }
 }
@@ -502,17 +521,6 @@ static void init_postprocess (ff_video_decoder_t *this
 
 static int ff_handle_mpeg_sequence(ff_video_decoder_t *this, mpeg_parser_t *parser) {
 
-  /*
-   * init codec
-   */
-  if (this->decoder_init_mode) {
-    _x_meta_info_set_utf8(this->stream, XINE_META_INFO_VIDEOCODEC,
-                          "mpeg-1 (ffmpeg)");
-
-    init_video_codec (this, BUF_VIDEO_MPEG);
-    this->decoder_init_mode = 0;
-  }
-
   /* frame format change */
   if ((parser->width != this->bih.biWidth) ||
       (parser->height != this->bih.biHeight) ||
@@ -843,6 +851,67 @@ static void ff_check_bufsize (ff_video_decoder_t *this
   }
 }
 
+static int ff_vc1_find_header(ff_video_decoder_t *this, buf_element_t *buf)
+{
+  uint8_t *p = buf->content;
+
+  if (!p[0] && !p[1] && p[2] == 1 && p[3] == 0x0f) {
+    int i;
+
+    this->context->extradata = calloc(1, buf->size);
+    this->context->extradata_size = 0;
+
+    for (i = 0; i < buf->size && i < 128; i++) {
+      if (!p[i] && !p[i+1] && p[i+2]) {
+	lprintf("00 00 01 %02x at %d\n", p[i+3], i);
+	if (p[i+3] != 0x0e && p[i+3] != 0x0f)
+	  break;
+      }
+      this->context->extradata[i] = p[i];
+      this->context->extradata_size++;
+    }
+
+    lprintf("ff_video_decoder: found VC1 sequence header\n");
+    return 1;
+  }
+
+  xprintf(this->stream->xine, XINE_VERBOSITY_DEBUG,
+	  "ffmpeg_video_dec: VC1 extradata missing !\n");
+  return 0;
+}
+
+static int ff_check_extradata(ff_video_decoder_t *this, unsigned int codec_type, buf_element_t *buf)
+{
+  if (this->context && this->context->extradata)
+    return 1;
+
+  switch (codec_type) {
+  case BUF_VIDEO_VC1:
+    return ff_vc1_find_header(this, buf);
+  default:;
+  }
+
+  return 1;
+}
+
+static void ff_init_mpeg12_mode(ff_video_decoder_t *this)
+{
+  this->is_mpeg12 = 1;
+
+  if (this->decoder_init_mode) {
+    _x_meta_info_set_utf8(this->stream, XINE_META_INFO_VIDEOCODEC,
+                          "mpeg-1 (ffmpeg)");
+
+    init_video_codec (this, BUF_VIDEO_MPEG);
+    this->decoder_init_mode = 0;
+  }
+
+  if ( this->mpeg_parser == NULL ) {
+    this->mpeg_parser = calloc(1, sizeof(mpeg_parser_t));
+    mpeg_parser_init(this->mpeg_parser);
+  }
+}
+
 static void ff_handle_preview_buffer (ff_video_decoder_t *this, buf_element_t *buf) {
   int codec_type;
 
@@ -850,15 +919,14 @@ static void ff_handle_preview_buffer (ff_video_decoder
 
   codec_type = buf->type & 0xFFFF0000;
   if (codec_type == BUF_VIDEO_MPEG) {
-    this->is_mpeg12 = 1;
-    if ( this->mpeg_parser == NULL ) {
-      this->mpeg_parser = calloc(1, sizeof(mpeg_parser_t));
-      mpeg_parser_init(this->mpeg_parser);
-      this->decoder_init_mode = 0;
-    }
+    ff_init_mpeg12_mode(this);
   }
 
   if (this->decoder_init_mode && !this->is_mpeg12) {
+
+    if (!ff_check_extradata(this, codec_type, buf))
+      return;
+
     init_video_codec(this, codec_type);
     init_postprocess(this);
     this->decoder_init_mode = 0;
@@ -902,6 +970,8 @@ static void ff_handle_header_buffer (ff_video_decoder_
       switch (codec_type) {
       case BUF_VIDEO_RV10:
       case BUF_VIDEO_RV20:
+      case BUF_VIDEO_RV30:
+      case BUF_VIDEO_RV40:
         this->bih.biWidth  = _X_BE_16(&this->buf[12]);
         this->bih.biHeight = _X_BE_16(&this->buf[14]);
 
@@ -1022,6 +1092,11 @@ static void ff_handle_mpeg12_buffer (ff_video_decoder_
 
   lprintf("handle_mpeg12_buffer\n");
 
+  if (!this->is_mpeg12) {
+    /* initialize mpeg parser */
+    ff_init_mpeg12_mode(this);
+  }
+
   while ((size > 0) || (flush == 1)) {
 
     uint8_t *current;
@@ -1055,12 +1130,26 @@ static void ff_handle_mpeg12_buffer (ff_video_decoder_
     }
 
     /* skip decoding b frames if too late */
+#if AVVIDEO > 1
+    this->context->skip_frame = (this->skipframes > 0) ? AVDISCARD_NONREF : AVDISCARD_DEFAULT;
+#else
     this->context->hurry_up = (this->skipframes > 0);
+#endif
 
     lprintf("avcodec_decode_video: size=%d\n", this->mpeg_parser->buffer_size);
+#if AVVIDEO > 1
+    AVPacket avpkt;
+    av_init_packet(&avpkt);
+    avpkt.data = (uint8_t *)this->mpeg_parser->chunk_buffer;
+    avpkt.size = this->mpeg_parser->buffer_size;
+    avpkt.flags = AV_PKT_FLAG_KEY;
+    len = avcodec_decode_video2 (this->context, this->av_frame,
+				 &got_picture, &avpkt);
+#else
     len = avcodec_decode_video (this->context, this->av_frame,
                                 &got_picture, this->mpeg_parser->chunk_buffer,
                                 this->mpeg_parser->buffer_size);
+#endif
     lprintf("avcodec_decode_video: decoded_size=%d, got_picture=%d\n",
             len, got_picture);
     len = current - buf->content - offset;
@@ -1112,7 +1201,13 @@ static void ff_handle_mpeg12_buffer (ff_video_decoder_
 
     } else {
 
-      if (this->context->hurry_up) {
+      if (
+#if AVVIDEO > 1
+	  this->context->skip_frame != AVDISCARD_DEFAULT
+#else
+	  this->context->hurry_up
+#endif
+	 ) {
         /* skipped frame, output a bad frame */
         img = this->stream->video_out->get_frame (this->stream->video_out,
                                                   this->bih.biWidth,
@@ -1178,49 +1273,6 @@ static void ff_check_pts_tagging(ff_video_decoder_t *t
 }
 #endif /* AVCODEC_HAS_REORDERED_OPAQUE */
 
-static int ff_vc1_find_header(ff_video_decoder_t *this, buf_element_t *buf)
-{
-  uint8_t *p = buf->content;
-
-  if (!p[0] && !p[1] && p[2] == 1 && p[3] == 0x0f) {
-    int i;
-
-    this->context->extradata = calloc(1, buf->size);
-    this->context->extradata_size = 0;
-
-    for (i = 0; i < buf->size && i < 128; i++) {
-      if (!p[i] && !p[i+1] && p[i+2]) {
-	lprintf("00 00 01 %02x at %d\n", p[i+3], i);
-	if (p[i+3] != 0x0e && p[i+3] != 0x0f)
-	  break;
-      }
-      this->context->extradata[i] = p[i];
-      this->context->extradata_size++;
-    }
-
-    lprintf("ff_video_decoder: found VC1 sequence header\n");
-    return 1;
-  }
-
-  xprintf(this->stream->xine, XINE_VERBOSITY_DEBUG,
-	  "ffmpeg_video_dec: VC1 extradata missing !\n");
-  return 0;
-}
-
-static int ff_check_extradata(ff_video_decoder_t *this, unsigned int codec_type, buf_element_t *buf)
-{
-  if (this->context && this->context->extradata)
-    return 1;
-
-  switch (codec_type) {
-  case BUF_VIDEO_VC1:
-    return ff_vc1_find_header(this, buf);
-  default:;
-  }
-
-  return 1;
-}
-
 static void ff_handle_buffer (ff_video_decoder_t *this, buf_element_t *buf) {
   uint8_t *chunk_buf = this->buf;
   AVRational avr00 = {0, 1};
@@ -1229,7 +1281,7 @@ static void ff_handle_buffer (ff_video_decoder_t *this
 
   if (!this->decoder_ok) {
     if (this->decoder_init_mode) {
-      int codec_type = buf->type & 0xFFFF0000;
+      int codec_type = buf->type & (BUF_MAJOR_MASK | BUF_DECODER_MASK);
 
       if (!ff_check_extradata(this, codec_type, buf))
 	return;
@@ -1304,13 +1356,25 @@ static void ff_handle_buffer (ff_video_decoder_t *this
         got_picture = 0;
       } else {
         /* skip decoding b frames if too late */
+#if AVVIDEO > 1
+	this->context->skip_frame = (this->skipframes > 0) ? AVDISCARD_NONREF : AVDISCARD_DEFAULT;
+#else
         this->context->hurry_up = (this->skipframes > 0);
-
+#endif
         lprintf("buffer size: %d\n", this->size);
+#if AVVIDEO > 1
+	AVPacket avpkt;
+	av_init_packet(&avpkt);
+	avpkt.data = (uint8_t *)&chunk_buf[offset];
+	avpkt.size = this->size;
+	avpkt.flags = AV_PKT_FLAG_KEY;
+	len = avcodec_decode_video2 (this->context, this->av_frame,
+				     &got_picture, &avpkt);
+#else
         len = avcodec_decode_video (this->context, this->av_frame,
                                     &got_picture, &chunk_buf[offset],
                                     this->size);
-
+#endif
 #ifdef AVCODEC_HAS_REORDERED_OPAQUE
         /* reset consumed pts value */
         this->context->reordered_opaque = ff_tag_pts(this, 0);
@@ -1432,7 +1496,7 @@ static void ff_handle_buffer (ff_video_decoder_t *this
                         img->base, img->pitches,
                         img->width, img->height,
                         this->av_frame->qscale_table, this->av_frame->qstride,
-                        this->pp_mode, this->pp_context,
+                        this->our_mode, this->our_context,
                         this->av_frame->pict_type);
 
         } else if (!this->av_frame->opaque) {
@@ -1555,7 +1619,7 @@ static void ff_decode_data (video_decoder_t *this_gen,
       if (buf->pts)
 	this->pts = buf->pts;
 
-      if (this->is_mpeg12) {
+      if ((buf->type & 0xFFFF0000) == BUF_VIDEO_MPEG) {
 	ff_handle_mpeg12_buffer(this, buf);
       } else {
 	ff_handle_buffer(this, buf);
@@ -1676,11 +1740,11 @@ static void ff_dispose (video_decoder_t *this_gen) {
     free(this->buf);
   this->buf = NULL;
 
-  if(this->pp_context)
-    pp_free_context(this->pp_context);
+  if(this->our_context)
+    pp_free_context(this->our_context);
 
-  if(this->pp_mode)
-    pp_free_mode(this->pp_mode);
+  if(this->our_mode)
+    pp_free_mode(this->our_mode);
 
   mpeg_parser_dispose(this->mpeg_parser);
 
@@ -1721,8 +1785,8 @@ static video_decoder_t *ff_video_open_plugin (video_de
   this->aspect_ratio      = 0;
 
   this->pp_quality        = 0;
-  this->pp_context        = NULL;
-  this->pp_mode           = NULL;
+  this->our_context       = NULL;
+  this->our_mode          = NULL;
 
   this->mpeg_parser       = NULL;
 
