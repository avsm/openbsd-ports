# $OpenBSD: Makefile,v 1.52 2011/09/16 10:31:20 espie Exp $

ONLY_FOR_ARCHS =	alpha amd64 i386 m68k sparc sparc64 powerpc vax

V = 3.3.6
FULL_VERSION = 3.3.6
FULL_PKGVERSION = 3.3.6
BOOTSTRAP_GEN = 8
ADASTRAP = adastrap-i386-3.3.6-${BOOTSTRAP_GEN}.tgz

PKGNAME-main =	gcc-${FULL_PKGVERSION}
PKGNAME-c++ =	g++-${FULL_PKGVERSION}
PKGNAME-estdc =	libstdc++-${FULL_PKGVERSION}
PKGNAME-g77 =	g77-${FULL_PKGVERSION}
PKGNAME-java =	gcj-${FULL_PKGVERSION}
PKGNAME-objc =	gobjc-${FULL_PKGVERSION}
PKGNAME-ada =	gnat-${FULL_PKGVERSION}
SHARED_LIBS =	estdc++		6.0 \
		g2c		1.0 \
		-org-w3c-dom	1.0 \
		-org-xml-sax	1.0 \
		gcj		5.0 \
		objc		2.0 \
		objc_gc		2.0

REVISION-main =		0
REVISION-c++ =		1
#REVISION-estdc =
REVISION-g77 =		1
REVISION-java =		1
REVISION-objc =		1
REVISION-ada =		1
EPOCH = 		0

MAINTAINER =	Marc Espie <espie@openbsd.org>

PSEUDO_FLAVORS = no_c++ no_fortran no_objc no_java no_ada

.include <bsd.own.mk>

# currently broken on i386 ? so empty
ONLY_FOR_ARCHS-ada =
# not really interesting either
ONLY_FOR_ARCHS-java =

FLAVOR ?= 

BUILD_DEPENDS =		devel/autoconf/2.13
BUILD_DEPENDS +=	devel/metaauto

# This can be patched out, apart from java that wants a pure parser.
BUILD_DEPENDS += 	devel/bison


MULTI_PACKAGES =	-main
BUILD = c

.if !${FLAVOR:L:Mno_fortran}
MULTI_PACKAGES += -g77
BUILD += fortran
.endif

.if !${FLAVOR:L:Mno_objc}
MULTI_PACKAGES += -objc
BUILD += objc
.endif

.if ${FLAVOR:L:Mno_java}
MULTI_PACKAGES += -java
.  for _a in ${MACHINE_ARCH} ${ARCH}
.    if ${ONLY_FOR_ARCHS-java:M${_a}}
BUILD += java
.    endif
.  endfor
.endif

.if !${FLAVOR:L:Mno_ada}
MULTI_PACKAGES += -ada
.  for _a in ${MACHINE_ARCH} ${ARCH}
.    if ${ONLY_FOR_ARCHS-ada:M${_a}}
BUILD += ada
.    endif
.  endfor
.endif

.if !${FLAVOR:L:Mno_c++} || ${BUILD:Mjava}
MULTI_PACKAGES += -c++ -estdc
BUILD += c++
.endif

USE_GROFF =		Yes

REGRESS_DEPENDS =	devel/dejagnu

DISTNAME =		gcc-${FULL_VERSION}

DISTFILES =  		${DISTNAME}.tar.bz2
SUPDISTFILES =		${ADASTRAP}:0

MASTER_SITES =	${MASTER_SITE_GCC:=releases/gcc-$(FULL_VERSION)/}
MASTER_SITES0 =	ftp://quatramaran.ens.fr/pub/espie/

CONFIGURE_STYLE =	gnu
MODGNU_CONFIG_GUESS_DIRS =	${WRKSRC} ${WRKSRC}/gcc

LANGS = c

.if ${BUILD:Mc++}
LANGS := 		${LANGS},c++
.endif

.if ${BUILD:Mfortran}
LANGS :=		${LANGS},f77
.endif

.if ${BUILD:Mobjc}
LANGS := 		${LANGS},objc
.endif

.if ${BUILD:Mjava}
LANGS :=		${LANGS},java
CONFIGURE_ARGS +=	--enable-java-gc=system-boehm
.endif

.if ${BUILD:Mada}
LANGS :=	${LANGS},ada
DISTFILES +=	${ADASTRAP}:0
CONFIGURE_ENV = ADAC=${WRKDIR}/bin/egcc GNATBIND=${WRKDIR}/bin/gnatbind
MAKE_ENV =	ADAC=${WRKDIR}/bin/egcc GNATBIND=${WRKDIR}/bin/gnatbind

post-build:
	cd ${WRKBUILD}/gcc && ${MAKE_PROGRAM} gnatlib_and_tools
.endif

post-extract:
.if ${BUILD:Mada} == "yes"
.  for f in egcc gnatbind gnatmake gnatlink
	echo "#! /bin/sh" >${WRKDIR}/bin/$f
	echo 'GNAT_ROOT=${WRKDIR}/bootstrap GCC_ROOT=${WRKDIR}/bootstrap exec ${WRKDIR}/bootstrap/bin/$f "$$@"' >>${WRKDIR}/bin/$f
	chmod a+x ${WRKDIR}/bin/$f
.  endfor
.endif
	echo "# This file automatically generated" >> ${WRKSRC}/libversions
.for l v in ${SHARED_LIBS}
	echo "LIB$l_LTVERSION = -version-info ${v:S/./:/}" >> ${WRKSRC}/libversions
.endfor

post-install:
.if ${BUILD:Mada}
	chown -R ${SHAREOWN}:${SHAREGRP} ${PREFIX}/lib/gcc-lib/*/$V/adainclude
.endif
	chown -R ${SHAREOWN}:${SHAREGRP} ${PREFIX}/lib/gcc-lib/*/$V/include

CONFIGURE_ENV +=	am_cv_func_iconv=no

CONFIGURE_ARGS = \
	--verbose \
	--program-transform-name=s,^,e, \
	--disable-nls  \
	--with-system-zlib \
	--enable-languages=${LANGS}

# This is needed, as internal cpp is no longer compatible with the
# visible beast
CONFIGURE_ARGS += --enable-cpp

.if ${BUILD:Mjava}
CONFIGURE_ARGS += --enable-sjlj-exceptions
# No way around it, java wants a pure parser
BUILD_DEPENDS += devel/bison
.endif


# if you wish to try your luck
#CONFIGURE_ARGS += --enable-threads=posix

CONFIGURE_ARGS += --with-gnu-as 
CONFIGURE_ARGS += --with-gnu-ld 
CONFIGURE_ARGS += ${CONFIGURE_SHARED}

SEPARATE_BUILD = flavored

USE_GMAKE = 	Yes

# you shouldn't skip bootstrap unless you know what you're doing
# use bootstrap-lean if you're pressed for space
ALL_TARGET = bootstrap

.if ${MACHINE_ARCH} == "m68k" || ${MACHINE_ARCH} == "sparc"
PKG_ARGS += -DPIC=1
.else
PKG_ARGS += -DPIC=0
.endif

.if ${MACHINE_ARCH} == "powerpc"
PKG_ARGS += -DPPC=1
.else
PKG_ARGS += -DPPC=0
.endif

RUN_DEPENDS =	gcc-${FULL_PKGVERSION}v0:${PKGPATH}
WANTLIB =	c

RUN_DEPENDS-main =

RUN_DEPENDS-estdc =
WANTLIB-estdc =

LIB_DEPENDS-java = devel/boehm-gc
WANTLIB-java =	${WANTLIB} gc

RUN_DEPENDS-c++ = ${RUN_DEPENDS} libstdc++->=3.3,<3.4|libstdc++->=3.3v0,<3.4v0:${PKGPATH},-estdc


.include <bsd.port.mk>

ADA_PACKAGE = ${PACKAGE_REPOSITORY}/i386/all/${PKGNAME-ada}${PKG_SUFX}
GCC_PACKAGE = ${PACKAGE_REPOSITORY}/i386/all/${PKGNAME-main}${PKG_SUFX}


adastrap: ${ADA_PACKAGE} ${GCC_PACKAGE}
	mkdir -p ${WRKDIR}/prepare/bootstrap
	cd ${WRKDIR}/prepare/bootstrap && tar zxf ${ADA_PACKAGE}
	cd ${WRKDIR}/prepare/bootstrap && tar zxf ${GCC_PACKAGE}
	rm -rf ${WRKDIR}/prepare/bootstrap/{+*,info,man}
	cd ${WRKDIR}/prepare && tar zcf ${FULLDISTDIR}/${ADASTRAP} bootstrap
