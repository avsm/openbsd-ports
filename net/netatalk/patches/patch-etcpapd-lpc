--- etc/papd/lp.c.orig	Sun Aug 17 09:20:25 1997
+++ etc/papd/lp.c	Wed Nov 24 12:43:33 1999
@@ -44,6 +44,8 @@
 #include <sys/time.h>
 #include <sys/socket.h>
 #include <sys/stat.h>
+#include <sys/types.h>
+#include <sys/uio.h>
 #if defined( sun ) && defined( __svr4__ )
 #include </usr/ucbinclude/sys/file.h>
 #else sun __svr4__
@@ -60,11 +62,13 @@
 #include <math.h>
 #endif ABS_PRINT
 
+#include <ctype.h>
 #include <stdio.h>
 #include <stdlib.h>
-#include <strings.h>
+#include <string.h>
 #include <netdb.h>
 #include <fcntl.h>
+#include <unistd.h>
 
 #include "printer.h"
 #include "file.h"
@@ -100,20 +104,26 @@
 #define LP_CONNECT	(1<<3)
 #define LP_QUEUE	(1<<4)
 
+int
 lp_person( person )
     char	*person;
 {
+    size_t	len;
+
     if ( lp.lp_person != NULL ) {
 	free( lp.lp_person );
     }
-    if (( lp.lp_person = (char *)malloc( strlen( person ) + 1 )) == NULL ) {
+	len = (strlen( person ) + 1);
+    if (( lp.lp_person = (char *)malloc( len )) == NULL ) {
 	syslog( LOG_ERR, "malloc: %m" );
 	exit( 1 );
     }
-    strcpy( lp.lp_person, person );
+    (void)strlcpy( lp.lp_person, person, len );
+    return(0);
 }
 
 #ifdef ABS_PRINT
+int
 lp_pagecost()
 {
     char	cost[ 22 ];
@@ -131,19 +141,25 @@
 }
 #endif ABS_PRINT
 
+int
 lp_host( host )
     char	*host;
 {
+    size_t	len;
+
     if ( lp.lp_host != NULL ) {
 	free( lp.lp_host );
     }
-    if (( lp.lp_host = (char *)malloc( strlen( host ) + 1 )) == NULL ) {
+	len = (strlen( host ) + 1);
+    if (( lp.lp_host = (char *)malloc( len )) == NULL ) {
 	syslog( LOG_ERR, "malloc: %m" );
 	exit( 1 );
     }
-    strcpy( lp.lp_host, host );
+    (void)strlcpy( lp.lp_host, host, len);
+	return(0);
 }
 
+int
 lp_job( job )
     char	*job;
 {
@@ -164,8 +180,10 @@
 	}
     }
     *q = '\0';
+	return(0);
 }
 
+int
 lp_init( out )
     struct papfile	*out;
 {
@@ -250,7 +268,7 @@
 	lp.lp_seq = n;
 
 	n = ( n + 1 ) % 1000;
-	sprintf( buf, "%03d\n", n );
+	snprintf( buf, sizeof( buf ), "%03d\n", n );
 	lseek( fd, 0L, 0 );
 	write( fd, buf, strlen( buf ));
 	close( fd );
@@ -263,6 +281,7 @@
     return( 0 );
 }
 
+int
 lp_open( out )
     struct papfile	*out;
 {
@@ -285,7 +304,7 @@
 	    return( -1 );
 	}
     } else {
-	sprintf( name, "df%c%03d%s", lp.lp_letter++, lp.lp_seq, hostname );
+	snprintf( name, sizeof ( name ), "df%c%03d%s", lp.lp_letter++, lp.lp_seq, hostname );
 
 	if (( fd = open( name, O_WRONLY|O_CREAT|O_EXCL, 0660 )) < 0 ) {
 	    syslog( LOG_ERR, "lp_open %s: %m", name );
@@ -303,17 +322,19 @@
     return( 0 );
 }
 
+int
 lp_close()
 {
     if (( lp.lp_flags & LP_INIT ) == 0 || ( lp.lp_flags & LP_OPEN ) == 0 ) {
-	return;
+	return(0);
     }
     fclose( lp.lp_stream );
     lp.lp_stream = NULL;
     lp.lp_flags &= ~LP_OPEN;
-    return;
+    return(0);
 }
 
+int
 lp_write( buf, len )
     char	*buf;
     int		len;
@@ -329,13 +350,14 @@
     return( 0 );
 }
 
+int
 lp_cancel()
 {
     char	name[ MAXPATHLEN ];
     char	letter;
 
     if (( lp.lp_flags & LP_INIT ) == 0 || lp.lp_letter == 'A' ) {
-	return;
+	return(0);
     }
 
     if ( lp.lp_flags & LP_OPEN ) {
@@ -343,13 +365,13 @@
     }
 
     for ( letter = 'A'; letter < lp.lp_letter; letter++ ) {
-	sprintf( name, "df%c%03d%s", letter, lp.lp_seq, hostname );
+	snprintf( name, sizeof ( name ), "df%c%03d%s", letter, lp.lp_seq, hostname );
 	if ( unlink( name ) < 0 ) {
 	    syslog( LOG_ERR, "lp_cancel unlink %s: %m", name );
 	}
     }
 
-    return;
+    return(0);
 }
 
 /*
@@ -358,6 +380,7 @@
  *
  * XXX piped?
  */
+int
 lp_print()
 {
     char		buf[ MAXPATHLEN ];
@@ -368,19 +391,19 @@
     FILE		*cfile;
 
     if (( lp.lp_flags & LP_INIT ) == 0 || lp.lp_letter == 'A' ) {
-	return;
+	return (0);
     }
     lp_close();
 
     if ( printer->p_flags & P_SPOOLED ) {
-	sprintf( tfname, "tfA%03d%s", lp.lp_seq, hostname );
+	snprintf( tfname, sizeof ( tfname ), "tfA%03d%s", lp.lp_seq, hostname );
 	if (( fd = open( tfname, O_WRONLY|O_EXCL|O_CREAT, 0660 )) < 0 ) {
 	    syslog( LOG_ERR, "lp_print %s: %m", tfname );
-	    return;
+	    return(0);
 	}
 	if (( cfile = fdopen( fd, "w" )) == NULL ) {
 	    syslog( LOG_ERR, "lp_print %s: %m", tfname );
-	    return;
+	    return(0);
 	}
 	fprintf( cfile, "H%s\n", hostname );	/* XXX lp_host? */
 
@@ -418,58 +441,62 @@
 	}
 	fclose( cfile );
 
-	sprintf( cfname, "cfA%03d%s", lp.lp_seq, hostname );
+	snprintf( cfname, sizeof ( cfname ), "cfA%03d%s", lp.lp_seq, hostname );
 	if ( link( tfname, cfname ) < 0 ) {
 	    syslog( LOG_ERR, "lp_print can't link %s to %s: %m", cfname,
 		    tfname );
-	    return;
+	    return(0);
 	}
 	unlink( tfname );
 
 	if (( s = lp_conn_unix()) < 0 ) {
 	    syslog( LOG_ERR, "lp_print: lp_conn_unix: %m" );
-	    return;
+	    return(0);
 	}
 
-	sprintf( buf, "\1%s\n", printer->p_printer );
+	snprintf( buf, sizeof ( buf ), "\1%s\n", printer->p_printer );
 	n = strlen( buf );
 	if ( write( s, buf, n ) != n ) {
 	    syslog( LOG_ERR, "lp_print write: %m" );
-	    return;
+	    return(0);
 	}
 	if ( read( s, buf, 1 ) != 1 ) {
 	    syslog( LOG_ERR, "lp_print read: %m" );
-	    return;
+	    return(0);
 	}
 
 	lp_disconn_unix( s );
 
 	if ( buf[ 0 ] != '\0' ) {
 	    syslog( LOG_ERR, "lp_print lpd said %c: %m", buf[ 0 ] );
-	    return;
+	    return(0);
 	}
     }
     syslog( LOG_INFO, "lp_print queued" );
-    return;
+    return(0);
 }
 
+int
 lp_disconn_unix( fd )
 {
     return( close( fd ));
 }
 
+int
 lp_conn_unix()
 {
     int			s;
     struct sockaddr_un	saun;
+    size_t		len;
 
     if (( s = socket( AF_UNIX, SOCK_STREAM, 0 )) < 0 ) {
 	syslog( LOG_ERR, "lp_conn_unix socket: %m" );
 	return( -1 );
     }
-    bzero( &saun, sizeof( struct sockaddr_un ));
+    memset( &saun, 0,sizeof( struct sockaddr_un ));
     saun.sun_family = AF_UNIX;
-    strcpy( saun.sun_path, _PATH_DEVPRINTER );
+	len = strlen( saun.sun_path );
+    (void)strlcpy( saun.sun_path, _PATH_DEVPRINTER, len );
     if ( connect( s, (struct sockaddr *)&saun,
 	    strlen( saun.sun_path ) + 2 ) < 0 ) {
 	syslog( LOG_ERR, "lp_conn_unix connect %s: %m", saun.sun_path );
@@ -480,11 +507,13 @@
     return( s );
 }
 
+int
 lp_disconn_inet( fd )
 {
     return( close( fd ));
 }
 
+int
 lp_conn_inet()
 {
     int			privfd, port = IPPORT_RESERVED - 1;
@@ -513,10 +542,10 @@
 	return( -1 );
     }
 
-    bzero( &sin, sizeof( struct sockaddr_in ));
+    memset( &sin, 0, sizeof( struct sockaddr_in ));
     sin.sin_family = AF_INET;
 /*    sin.sin_addr.s_addr = htonl( INADDR_LOOPBACK ); */
-    bcopy( hp->h_addr, &sin.sin_addr, hp->h_length );
+    memcpy( &sin.sin_addr, hp->h_addr, hp->h_length );
     sin.sin_port = sp->s_port;
 
     if ( connect( privfd, (struct sockaddr *)&sin,
@@ -529,6 +558,7 @@
     return( privfd );
 }
 
+int
 lp_rmjob( job )
     int		job;
 {
@@ -544,7 +574,7 @@
 	return( -1 );
     }
 
-    sprintf( buf, "\5%s %s %d\n", printer->p_printer, lp.lp_person, job );
+    snprintf( buf, sizeof ( buf ), "\5%s %s %d\n", printer->p_printer, lp.lp_person, job );
     n = strlen( buf );
     if ( write( s, buf, n ) != n ) {
 	syslog( LOG_ERR, "lp_rmjob write: %m" );
@@ -569,6 +599,7 @@
 char	*tag_size = "size: ";
 char	*tag_status = "status: ";
 
+int
 lp_queue( out )
     struct papfile	*out;
 {
@@ -581,7 +612,7 @@
 	return( -1 );
     }
 
-    sprintf( buf, "\3%s\n", printer->p_printer );
+    snprintf( buf, sizeof( buf ), "\3%s\n", printer->p_printer );
     n = strlen( buf );
     if ( write( s, buf, n ) != n ) {
 	syslog( LOG_ERR, "lp_queue write: %m" );
