$OpenBSD: patch-bochs_h,v 1.1 2001/02/02 16:59:06 todd Exp $
--- bochs.h.orig	Sat Mar 25 21:24:57 2000
+++ bochs.h	Mon Oct 23 22:12:42 2000
@@ -69,6 +69,10 @@ extern "C" {
 #include "config.h"
 #include "debug/debug.h"
 
+
+#include "bxio.h"
+
+void bx_signal_handler(int signum);
 //
 // some macros to interface the CPU and memory to external environment
 // so that these functions can be redirected to the debugger when
@@ -77,20 +81,20 @@ extern "C" {
 
 #if ((BX_DEBUGGER == 1) && (BX_NUM_SIMULATORS >= 2))
 // =-=-=-=-=-=-=- Redirected to cosimulation debugger -=-=-=-=-=-=-=
-#define BX_VGA_MEM_READ(addr)       bx_dbg_ucmem_read(addr)
-#define BX_VGA_MEM_WRITE(addr, val) bx_dbg_ucmem_write(addr, val)
+#define BX_VGA_MEM_READ(addr)       bio->getdbg()_ucmem_read(addr)
+#define BX_VGA_MEM_WRITE(addr, val) bio->getdbg()_ucmem_write(addr, val)
 #if BX_SUPPORT_A20
 #  define A20ADDR(x)               ( (x) & bx_pc_system.a20_mask )
 #else
 #  define A20ADDR(x)                (x)
 #endif
-#define BX_INP(addr, len)           bx_dbg_inp(addr, len)
-#define BX_OUTP(addr, val, len)     bx_dbg_outp(addr, val, len)
+#define BX_INP(addr, len)           bio->getdbg()_inp(addr, len)
+#define BX_OUTP(addr, val, len)     bio->getdbg()_outp(addr, val, len)
 #define BX_HRQ                      (bx_pc_system.HRQ)
-#define BX_RAISE_HLDA()             bx_dbg_raise_HLDA()
+#define BX_RAISE_HLDA()             bio->getdbg()_raise_HLDA()
 #define BX_TICK1()
 #define BX_INTR                     bx_pc_system.INTR
-#define BX_SET_INTR(b)              bx_dbg_set_INTR(b)
+#define BX_SET_INTR(b)              bio->getdbg()_set_INTR(b)
 #if BX_SIM_ID == 0
 #  define BX_CPU_C                  bx_cpu0_c
 #  define BX_CPU                    bx_cpu0
@@ -102,7 +106,7 @@ extern "C" {
 #  define BX_MEM_C                  bx_mem1_c
 #  define BX_MEM                    bx_mem1
 #endif
-#define BX_SET_ENABLE_A20(enabled)  bx_dbg_async_pin_request(BX_DBG_ASYNC_PENDING_A20, \
+#define BX_SET_ENABLE_A20(enabled)  bio->getdbg()_async_pin_request(BX_DBG_ASYNC_PENDING_A20, \
                                       enabled)
 #define BX_GET_ENABLE_A20()         bx_pc_system.get_enable_a20()
 
@@ -139,7 +143,7 @@ extern "C" {
 
 // #define BX_IAC()                 bx_pc_system.IAC()
 #define BX_IAC()                    bx_devices.pic->IAC()
-//#define BX_IAC()                    bx_dbg_IAC()
+//#define BX_IAC()                    bio->getdbg()_IAC()
 
 //
 // Ways for the the external environment to report back information
@@ -153,28 +157,28 @@ extern "C" {
 // for multiple simulators, we always need this info, since we're
 // going to replay it.
 #  define BX_DBG_DMA_REPORT(addr, len, what, val) \
-        bx_dbg_dma_report(addr, len, what, val)
+        bio->getdbg()_dma_report(addr, len, what, val)
 #  define BX_DBG_IAC_REPORT(vector, irq) \
-        bx_dbg_iac_report(vector, irq)
+        bio->getdbg()_iac_report(vector, irq)
 #  define BX_DBG_A20_REPORT(val) \
-        bx_dbg_a20_report(val)
+        bio->getdbg()_a20_report(val)
 #  define BX_DBG_IO_REPORT(addr, size, op, val) \
-        bx_dbg_io_report(addr, size, op, val)
+        bio->getdbg()_io_report(addr, size, op, val)
 #  define BX_DBG_UCMEM_REPORT(addr, size, op, val)
 #else
 // for a single simulator debug environment, we can optimize a little
 // by conditionally calling, as per requested.
 
 #  define BX_DBG_DMA_REPORT(addr, len, what, val) \
-        if (bx_guard.report.dma) bx_dbg_dma_report(addr, len, what, val)
+        if (bx_guard.report.dma) bio->getdbg()_dma_report(addr, len, what, val)
 #  define BX_DBG_IAC_REPORT(vector, irq) \
-        if (bx_guard.report.irq) bx_dbg_iac_report(vector, irq)
+        if (bx_guard.report.irq) bio->getdbg()_iac_report(vector, irq)
 #  define BX_DBG_A20_REPORT(val) \
-        if (bx_guard.report.a20) bx_dbg_a20_report(val)
+        if (bx_guard.report.a20) bio->getdbg()_a20_report(val)
 #  define BX_DBG_IO_REPORT(addr, size, op, val) \
-        if (bx_guard.report.io) bx_dbg_io_report(addr, size, op, val)
+        if (bx_guard.report.io) bio->getdbg()_io_report(addr, size, op, val)
 #  define BX_DBG_UCMEM_REPORT(addr, size, op, val) \
-        if (bx_guard.report.ucmem) bx_dbg_ucmem_report(addr, size, op, val)
+        if (bx_guard.report.ucmem) bio->getdbg()_ucmem_report(addr, size, op, val)
 #endif  // #if (BX_NUM_SIMULATORS > 1)
 
 #else  // #if BX_DEBUGGER
@@ -219,44 +223,6 @@ extern Bit8u DTPageDirty[];
 #  include "dynamic/dynamic.h"
 #endif
 
-
-typedef struct {
-  Boolean floppy;
-  Boolean keyboard;
-  Boolean video;
-  Boolean disk;
-  Boolean pit;
-  Boolean pic;
-  Boolean bios;
-  Boolean cmos;
-  Boolean a20;
-  Boolean interrupts;
-  Boolean exceptions;
-  Boolean unsupported;
-  Boolean temp;
-  Boolean reset;
-  Boolean debugger;
-  Boolean mouse;
-  Boolean io;
-  Boolean xms;
-  Boolean v8086;
-  Boolean paging;
-  Boolean creg;
-  Boolean dreg;
-  Boolean dma;
-  Boolean unsupported_io;
-  Boolean serial;
-  Boolean cdrom;
-#ifdef MAGIC_BREAKPOINT
-  Boolean magic_break_enabled;
-#endif /* MAGIC_BREAKPOINT */
-  void* record_io;
-  } bx_debug_t;
-
-void bx_printf(char *fmt, ...);
-void bx_panic(char *fmt, ...);
-void bx_atexit(void);
-extern bx_debug_t bx_dbg;
 
 
 
