$OpenBSD: patch-kinit_wrapper_c,v 1.1.2.1 2003/01/07 00:12:40 brad Exp $
--- kinit/wrapper.c.orig	Sun Jul 29 00:55:38 2001
+++ kinit/wrapper.c	Sun Jan  5 16:04:16 2003
@@ -38,6 +38,7 @@
 #include <unistd.h>
 #include <pwd.h>
 #include <signal.h>
+#include <limits.h>
 
 extern char **environ;
 
@@ -53,6 +54,9 @@ static char *getDisplay()
       display = ":0";
    }
    result = malloc(strlen(display)+1);
+   if (result == NULL)
+      return NULL;
+
    strcpy(result, display);
    screen = strrchr(result, '.');
    colon = strrchr(result, ':');
@@ -115,12 +119,12 @@ static int openSocket()
   int s;
   struct sockaddr_un server;
 #define MAX_SOCK_FILE 255
-  char sock_file[MAX_SOCK_FILE];
+  char sock_file[MAX_SOCK_FILE + 1];
   const char *home_dir = getenv("HOME");
   const char *kde_home = getenv("KDEHOME");
   char *display;
 
-  sock_file[0] = 0;
+  sock_file[0] = sock_file[MAX_SOCK_FILE] = 0;
 
   if (!kde_home || !kde_home[0])
   {
@@ -140,15 +144,15 @@ static int openSocket()
         exit(255);
      }
      kde_home++;
-     strcat(sock_file, home_dir);
+     strncpy(sock_file, home_dir, MAX_SOCK_FILE);
   }
-  strcat(sock_file, kde_home);
+  strncat(sock_file, kde_home, MAX_SOCK_FILE - strlen(sock_file));
 
   /** Strip trailing '/' **/
   if ( sock_file[strlen(sock_file)-1] == '/')
      sock_file[strlen(sock_file)-1] = 0;
   
-  strcat(sock_file, "/socket-");
+  strncat(sock_file, "/socket-", MAX_SOCK_FILE - strlen(sock_file));
   if (gethostname(sock_file+strlen(sock_file), MAX_SOCK_FILE - strlen(sock_file) - 1) != 0)
   {
      perror("Aborting. Could not determine hostname: ");
@@ -157,7 +161,13 @@ static int openSocket()
 
   /* append $DISPLAY */
   display = getDisplay();
-  if (strlen(sock_file)+strlen(display)+2 > MAX_SOCK_FILE)
+  if (display == NULL)
+  {
+     fprintf(stderr, "Error: Could not determine display.\n");
+     return -1;
+  }
+
+  if (strlen(sock_file)+strlen(display)+strlen("/kdeinit-")+2 > MAX_SOCK_FILE)
   {
      fprintf(stderr, "Aborting. Socket name will be too long.\n");
      exit(255);
@@ -401,6 +411,11 @@ int main(int argc, char **argv)
    write_socket(sock, (char *) &header, sizeof(header));
 
    buffer = (char *) malloc(size);
+   if (buffer == NULL)
+   {
+        fprintf(stderr, "Error: malloc() failed.");
+        exit(255);
+   }
    p = buffer;
       
    memcpy(p, &arg_count, sizeof(arg_count));
@@ -472,6 +487,11 @@ int main(int argc, char **argv)
    {
       long pid;
       buffer = (char *) malloc(header.arg_length);
+      if (buffer == NULL)
+      {
+          fprintf(stderr, "Error: malloc() failed\n");
+          exit(255);
+      }
       read_socket(sock, buffer, header.arg_length);
       pid = *((long *) buffer);
       if( !kwrapper ) /* kwrapper shouldn't print any output */
