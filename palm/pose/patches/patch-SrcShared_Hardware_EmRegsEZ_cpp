$OpenBSD: patch-SrcShared_Hardware_EmRegsEZ_cpp,v 1.1.1.1 2006/10/19 16:24:51 mbalmer Exp $
--- SrcShared/Hardware/EmRegsEZ.cpp.orig	Fri Mar 29 14:11:18 2002
+++ SrcShared/Hardware/EmRegsEZ.cpp	Thu Oct 19 17:26:40 2006
@@ -59,18 +59,18 @@ static const uint16 gBaseAddressShift = 
 static const HwrM68EZ328Type	kInitial68EZ328RegisterValues =
 {
 	0x1C,		// Byte		scr;							// $000: System Control Register
-	{ 0 },		// Byte											___filler0[0x004-0x001];
+	0,			// Byte											___filler0[0x004-0x001];
 	hwrEZ328chipIDEZ,		// Byte		chipID;							// $004: Chip ID Register
 	hwrEZ328maskID1J83G,	// Byte		maskID;							// $005: Mask ID Register
 	0x00,		// Word		swID;							// $006: Software ID Register
-	{ 0 },		// Byte											___filler1[0x100-0x008];				 
+	0,			// Byte											___filler1[0x100-0x008];				 
 
 	0x0000,		// Word		csAGroupBase;					// $100: Chip Select Group A Base Register
 	0x0000,		// Word		csBGroupBase;					// $102: Chip Select Group B Base Register
 	0x0000,		// Word		csCGroupBase;					// $104: Chip Select Group C Base Register
 	0x0000,		// Word		csDGroupBase;					// $106: Chip Select Group D Base Register
 
-	{ 0 },		// Byte											___filler6[0x110-0x108];
+	0,			// Byte											___filler6[0x110-0x108];
 
 	0x00E0,		// Word		csASelect;						// $110: Group A Chip Select Register
 	0x0000,		// Word		csBSelect;						// $112: Group B Chip Select Register
@@ -79,47 +79,47 @@ static const HwrM68EZ328Type	kInitial68E
 
 	0x0060,		// Word		emuCS;							// $118: EMU Chip Select Register
 
-	{ 0 },		// Byte											___filler2[0x200-0x11A];		
+	0,			// Byte											___filler2[0x200-0x11A];		
 
 	0x2430,		// Word		pllControl;						// $200: PLL Control Register
 	0x0123,		// Word		pllFreqSel;						// $202: PLL Frequency Select Register
 	0,		// !!! ---> Marked as reserved in 1.4 Word		pllTest;						// $204: PLL Test Register (do not access)
-	{ 0 },		// Byte											___filler44;
+	0,			// Byte											___filler44;
 	0x1F,		// Byte		pwrControl;						// $207: Power Control Register
 
-	{ 0 },		// Byte											___filler3[0x300-0x208];
+	0,			// Byte											___filler3[0x300-0x208];
 
 	0x00,		// Byte		intVector;						// $300: Interrupt Vector Register
-	{ 0 },		// Byte											___filler4;
+	0,			// Byte											___filler4;
 	0x0000,		// Word		intControl;						// $302: Interrupt Control Register
 	0x00FF,		// Word		intMaskHi;						// $304: Interrupt Mask Register/HIGH word
 	0xFFFF,		// Word		intMaskLo;						// $306: Interrupt Mask Register/LOW word
-	{ 0 },		// Byte											___filler7[0x30c-0x308];
+	0,			// Byte											___filler7[0x30c-0x308];
 	0x0000,		// Word		intStatusHi;					// $30C: Interrupt Status Register/HIGH word
 	0x0000,		// Word		intStatusLo;					// $30E: Interrupt Status Register/LOW word
 	0x0000,		// Word		intPendingHi;					// $310: Interrupt Pending Register
 	0x0000,		// Word		intPendingLo;					// $312: Interrupt Pending Register
 
-	{ 0 },		// Byte 										___filler4a[0x400-0x314];
+	0,			// Byte 										___filler4a[0x400-0x314];
 
 	0x00,		// Byte		portADir;						// $400: Port A Direction Register
 	0x00,		// Byte		portAData;						// $401: Port A Data Register
 	0xFF,		// Byte		portAPullupEn;					// $402: Port A Pullup Enable (similar to Select on DB)
-	{ 0 },		// Byte											___filler8[5];	
+	0,			// Byte											___filler8[5];	
 
 	0x00,		// Byte		portBDir;						// $408: Port B Direction Register
 	0x00,		// Byte		portBData;						// $409: Port B Data Register
 	0xFF,		// Byte		portBPullupEn;					// $40A: Port B Pullup Enable
 	0xFF,		// Byte		portBSelect;					// $40B: Port B Select Register	
 
-	{ 0 },		// Byte											___filler9[4];
+	0,			// Byte											___filler9[4];
 
 	0x00,		// Byte		portCDir;						// $410: Port C Direction Register
 	0x00,		// Byte		portCData;						// $411: Port C Data Register
 	0xFF,		// Byte		portCPulldnEn;					// $412: Port C Pulldown Enable
 	0xFF,		// Byte		portCSelect;					// $413: Port C Select Register	
 
-	{ 0 },		// Byte											___filler10[4];
+	0,			// Byte											___filler10[4];
 
 	0x00,		// Byte		portDDir;						// $418: Port D Direction Register
 	0x00,		// Byte		portDData;						// $419: Port D Data Register
@@ -135,21 +135,21 @@ static const HwrM68EZ328Type	kInitial68E
 	0xFF,		// Byte		portEPullupEn;					// $422: Port E Pull-up Enable
 	0xFF,		// Byte		portESelect;					// $423: Port E Select Register
 
-	{ 0 },		// Byte											___filler14[4];
+	0,			// Byte											___filler14[4];
 
 	0x00,		// Byte		portFDir;						// $428: Port F Direction Register
 	0x00,		// Byte		portFData;						// $429: Port F Data Register
 	0xFF,		// Byte		portFPullupdnEn;				// $42A: Port F Pull-up/down Enable
 	0x00,		// Byte		portFSelect;					// $42B: Port F Select Register
 
-	{ 0 },		// Byte											___filler16[4];
+	0,			// Byte											___filler16[4];
 
 	0x00,		// Byte		portGDir;						// $430: Port G Direction Register
 	0x00,		// Byte		portGData;						// $431: Port G Data Register
 	0x3D,		// Byte		portGPullupEn;					// $432: Port G Pull-up Enable
 	0x08,		// Byte		portGSelect;					// $433: Port G Select Register
 
-	{ 0 },		// Byte											___filler2000[0x500-0x434];
+	0,			// Byte											___filler2000[0x500-0x434];
 
 	0x0020,		// Word		pwmControl;						// $500: PWM Control Register
 	0x00,		// Byte		pwmSampleHi;					// $502: PWM Sample - high byte
@@ -157,7 +157,7 @@ static const HwrM68EZ328Type	kInitial68E
 	0xFE,		// Byte		pwmPeriod;						// $504: PWM Period
 	0x00,		// Byte		pwmCounter;						// $505: PWM Counter
 	
-	{ 0 },		// Byte											___filler24[0x600-0x506];
+	0,			// Byte											___filler24[0x600-0x506];
 
 	0x0000,		// Word		tmr1Control;					// $600: Timer 1 Control Register
 	0x0000,		// Word		tmr1Prescaler;					// $602: Timer 1 Prescaler Register
@@ -166,12 +166,12 @@ static const HwrM68EZ328Type	kInitial68E
 	0x0000,		// Word		tmr1Counter;					// $608: Timer 1 Counter Register
 	0x0000,		// Word		tmr1Status;						// $60A: Timer 1 Status Register
 
-	{ 0 },		// Byte											___filler25[0x800-0x61E];
+	0,			// Byte											___filler25[0x800-0x61E];
 
 	0x0000,		// Word		spiMasterData;					// $800: SPI Master Data Register
 	0x0000,		// Word		spiMasterControl;				// $802: SPI Master Control Register
 
-	{ 0 },		// Byte											___filler27[0x900-0x804];
+	0,			// Byte											___filler27[0x900-0x804];
 
 	0x0000,		// Word		uControl;						// $900: Uart Control Register
 	0x003F,		// Word		uBaud;							// $902: Uart Baud Control Register
@@ -180,62 +180,62 @@ static const HwrM68EZ328Type	kInitial68E
 	0x0000,		// Word		uMisc;							// $908: Uart Miscellaneous Register
 	0x0000,		// Word		uNonIntPresc;					// $90A: Uart IRDA Non-Integer Prescaler
 
-	{ 0 },		// Byte											___filler28[0xA00-0x90C];
+	0,			// Byte											___filler28[0xA00-0x90C];
 
 	0x00000000,	// DWord	lcdStartAddr;					// $A00: Screen Starting Address Register
-	{ 0 },		// Byte											___filler29;
+	0,			// Byte											___filler29;
 	0xFF,		// Byte		lcdPageWidth;					// $A05: Virtual Page Width Register
-	{ 0 },		// Byte											___filler30[2];
+	0,			// Byte											___filler30[2];
 	0x03FF,		// Word		lcdScreenWidth;					// $A08: Screen Width Register
 	0x01FF,		// Word		lcdScreenHeight;				// $A0A: Screen Height Register
-	{ 0 },		// Byte											___filler31[0xA18-0xA0C];
+	0,			// Byte											___filler31[0xA18-0xA0C];
 	0x0000,		// Word		lcdCursorXPos;					// $A18: Cursor X Position
 	0x0000,		// Word		lcdCursorYPos;					// $A1A:	Cursor Y Position
 	0x0101,		// Word		lcdCursorWidthHeight;			// $A1C: Cursor Width and Height
-	{ 0 },		// Byte											___filler32;
+	0,			// Byte											___filler32;
 	0x7F,		// Byte		lcdBlinkControl;				// $A1F: Blink Control Register
 	0x00,		// Byte		lcdPanelControl;				// $A20: Panel Interface Control Register
 	0x00,		// Byte		lcdPolarity;					// $A21: Polarity Config Register
-	{ 0 },		// Byte											___filler33;						
+	0,			// Byte											___filler33;						
 	0x00,		// Byte		lcdACDRate;						// $A23: ACD (M) Rate Control Register
-	{ 0 },		// Byte											___filler34;
+	0,			// Byte											___filler34;
 	0x00,		// Byte		lcdPixelClock;					// $A25: Pixel Clock Divider Register
-	{ 0 },		// Byte											___filler35;
+	0,			// Byte											___filler35;
 	0x40,		// Byte		lcdClockControl;				// $A27: Clocking Control Register
-	{ 0 },		// Byte											___filler36;
+	0,			// Byte											___filler36;
 	0xFF,		// Byte		lcdRefreshRateAdj;				// $A29: Refresh Rate Adjustment Register
-	{ 0 },		// Byte											___filler2003[0xA2D-0xA2A];
+	0,			// Byte											___filler2003[0xA2D-0xA2A];
 	0x00,		// Byte		lcdPanningOffset;				// $A2D: Panning Offset Register
 
-	{ 0 },		// Byte											___filler37[0xA31-0xA2E];
+	0,			// Byte											___filler37[0xA31-0xA2E];
 
 	0xB9,		// Byte		lcdFrameRate;					// $A31: Frame Rate Control Modulation Register
-	{ 0 },		// Byte											___filler2004;
+	0,			// Byte											___filler2004;
 	0x84,		// Byte		lcdGrayPalette;					// $A33: Gray Palette Mapping Register
 	0x00,		// Byte		lcdReserved;					// $A34: Reserved
-	{ 0 },		// Byte											___filler2005;
+	0,			// Byte											___filler2005;
 	0x0000,		// Word		lcdContrastControlPWM;			// $A36: Contrast Control
 
-	{ 0 },		// Byte											___filler40[0xB00-0xA38];
+	0,			// Byte											___filler40[0xB00-0xA38];
 
 	0x00000000,	// DWord	rtcHourMinSec;					// $B00: RTC Hours, Minutes, Seconds Register
 	0x00000000,	// DWord	rtcAlarm;						// $B04: RTC Alarm Register
-	{ 0 },		// Byte											___filler2001[0xB0A-0xB08];
+	0,			// Byte											___filler2001[0xB0A-0xB08];
 	0x0001,		// Word		rtcWatchDog;					// $B0A: RTC Watchdog Timer
 	0x00,		// Word		rtcControl;						// $B0C: RTC Control Register
 	0x00,		// Word		rtcIntStatus;					// $B0E: RTC Interrupt Status Register
 	0x00,		// Word		rtcIntEnable;					// $B10: RTC Interrupt Enable Register
 	0x00,		// Word		stopWatch;						// $B12: Stopwatch Minutes
-	{ 0 },		// Byte											___filler2002[0xB1A-0xB14];
+	0,			// Byte											___filler2002[0xB1A-0xB14];
 	0x0000,		// Word		rtcDay;							// $B1A: RTC Day
 	0x0000,		// Word		rtcDayAlarm;					// $B1C: RTC Day Alarm
 
-	{ 0 },		// Byte											___filler41[0xC00-0xB1E];
+	0,			// Byte											___filler41[0xC00-0xB1E];
 
 	0x0000,		// Word		dramConfig;						// $C00: DRAM Memory Config Register
 	0x0000,		// Word		dramControl;					// $C02: DRAM Control Register
 
-	{ 0 },		// Byte											___filler42[0xD00-0xC04];
+	0,			// Byte											___filler42[0xD00-0xC04];
 
 	0x00000000,	// DWord	emuAddrCompare;					// $D00: Emulation Address Compare Register   
 	0x00000000,	// DWord	emuAddrMask;					// $D04: Emulation Address Mask Register
