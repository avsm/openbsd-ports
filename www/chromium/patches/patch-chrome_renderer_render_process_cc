$OpenBSD: patch-chrome_renderer_render_process_cc,v 1.1 2010/12/13 09:51:45 espie Exp $
--- chrome/renderer/render_process.cc.orig	Tue Mar 30 07:31:33 2010
+++ chrome/renderer/render_process.cc	Sun Nov 28 00:11:31 2010
@@ -128,7 +128,7 @@ RenderProcess::~RenderProcess() {
 
 bool RenderProcess::InProcessPlugins() {
   const CommandLine& command_line = *CommandLine::ForCurrentProcess();
-#if defined(OS_LINUX)
+#if defined(OS_NIX)
   // Plugin processes require a UI message loop, and the Linux message loop
   // implementation only allows one UI loop per process.
   if (command_line.HasSwitch(switches::kInProcessPlugins))
@@ -166,10 +166,10 @@ bool RenderProcess::LaunchNaClProcess(const char* url,
 // Platform specific code for dealing with bitmap transport...
 
 TransportDIB* RenderProcess::CreateTransportDIB(size_t size) {
-#if defined(OS_WIN) || defined(OS_LINUX)
+#if defined(OS_WIN) || defined(OS_NIX)
   // Windows and Linux create transport DIBs inside the renderer
   return TransportDIB::Create(size, sequence_number_++);
-#elif defined(OS_MACOSX)  // defined(OS_WIN) || defined(OS_LINUX)
+#elif defined(OS_MACOSX)  // defined(OS_WIN) || defined(OS_NIX)
   // Mac creates transport DIBs in the browser, so we need to do a sync IPC to
   // get one.
   TransportDIB::Handle handle;
@@ -204,7 +204,7 @@ skia::PlatformCanvas* RenderProcess::GetDrawingCanvas(
   int width = rect.width();
   int height = rect.height();
   const size_t stride = skia::PlatformCanvas::StrideForWidth(rect.width());
-#if defined(OS_LINUX)
+#if defined(OS_NIX)
   const size_t max_size = base::SysInfo::MaxSharedMemorySize();
 #else
   const size_t max_size = 0;
