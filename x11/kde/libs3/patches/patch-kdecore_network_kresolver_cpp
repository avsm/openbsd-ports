$OpenBSD: patch-kdecore_network_kresolver_cpp,v 1.9 2005/11/29 14:00:12 espie Exp $
--- kdecore/network/kresolver.cpp.orig	Mon Oct 10 17:06:02 2005
+++ kdecore/network/kresolver.cpp	Mon Nov 21 12:00:08 2005
@@ -66,6 +66,10 @@
 QMutex getXXbyYYmutex;
 #endif
 
+#ifdef __OpenBSD__
+#define USE_OPENBSD 1
+#endif
+
 using namespace KNetwork;
 using namespace KNetwork::Internal;
 
@@ -616,17 +620,28 @@ QStrList KResolver::protocolName(int pro
   pe = getprotobynumber(protonum);
 
 #else
+# ifdef USE_OPENBSD // OpenBSD uses an HP/IBM/DEC API
+  struct protoent protobuf;
+  struct protoent_data pdata;
+  ::memset(&pdata, 0, sizeof pdata);
+
+  if (getprotobynumber_r(protonum, &protobuf, &pdata) == 0)
+    pe = &protobuf;
+  else
+    pe = 0;
+
+# else
   size_t buflen = 1024;
   struct protoent protobuf;
   char *buf;
   do
     {
       buf = new char[buflen];
-# ifdef USE_SOLARIS // Solaris uses a 4 argument getprotobynumber_r which returns struct *protoent or NULL
+#  ifdef USE_SOLARIS // Solaris uses a 4 argument getprotobynumber_r which returns struct *protoent or NULL
       if ((pe = getprotobynumber_r(protonum, &protobuf, buf, buflen)) && (errno == ERANGE))
-# else
+#  else
       if (getprotobynumber_r(protonum, &protobuf, buf, buflen, &pe) == ERANGE)
-# endif
+#  endif
 	{
 	  buflen += 1024;
 	  delete [] buf;
@@ -635,6 +650,7 @@ QStrList KResolver::protocolName(int pro
 	break;
     }
   while (pe == 0L);
+# endif
 #endif
 
   // Do common processing
@@ -647,7 +663,9 @@ QStrList KResolver::protocolName(int pro
     }
 
 #ifdef HAVE_GETPROTOBYNAME_R
+# ifndef USE_OPENBSD
   delete [] buf;
+# endif
 #endif
 
   return lst;
@@ -662,17 +680,27 @@ QStrList KResolver::protocolName(const c
   pe = getprotobyname(protoname);
 
 #else
+# ifdef USE_OPENBSD // OpenBSD uses an HP/IBM/DEC API
+  struct protoent protobuf;
+  struct protoent_data pdata;
+  ::memset(&pdata, 0, sizeof pdata);
+
+  if (getprotobyname_r(protoname, &protobuf, &pdata) == 0)
+    pe = &protobuf;
+  else
+    pe = 0;
+# else
   size_t buflen = 1024;
   struct protoent protobuf;
   char *buf;
   do
     {
       buf = new char[buflen];
-# ifdef USE_SOLARIS // Solaris uses a 4 argument getprotobyname_r which returns struct *protoent or NULL
+#  ifdef USE_SOLARIS // Solaris uses a 4 argument getprotobyname_r which returns struct *protoent or NULL
       if ((pe = getprotobyname_r(protoname, &protobuf, buf, buflen)) && (errno == ERANGE))
-# else
+#  else
       if (getprotobyname_r(protoname, &protobuf, buf, buflen, &pe) == ERANGE)
-# endif
+#  endif
 	{
 	  buflen += 1024;
 	  delete [] buf;
@@ -681,6 +709,7 @@ QStrList KResolver::protocolName(const c
 	break;
     }
   while (pe == 0L);
+# endif
 #endif
 
   // Do common processing
@@ -693,7 +722,9 @@ QStrList KResolver::protocolName(const c
     }
 
 #ifdef HAVE_GETPROTOBYNAME_R
+# ifndef USE_OPENBSD
   delete [] buf;
+# endif
 #endif
 
   return lst;
@@ -708,17 +739,28 @@ int KResolver::protocolNumber(const char
   pe = getprotobyname(protoname);
 
 #else
+# ifdef USE_OPENBSD // OpenBSD uses an HP/IBM/DEC API
+  struct protoent protobuf;
+  struct protoent_data pdata;
+  ::memset(&pdata, 0, sizeof pdata);
+
+  if (getprotobyname_r(protoname, &protobuf, &pdata) == 0)
+    pe = &protobuf;
+  else
+    pe = 0;
+
+# else
   size_t buflen = 1024;
   struct protoent protobuf;
   char *buf;
   do
     {
       buf = new char[buflen];
-# ifdef USE_SOLARIS // Solaris uses a 4 argument getprotobyname_r which returns struct *protoent or NULL
+#  ifdef USE_SOLARIS // Solaris uses a 4 argument getprotobyname_r which returns struct *protoent or NULL
       if ((pe = getprotobyname_r(protoname, &protobuf, buf, buflen)) && (errno == ERANGE))
-# else
+#  else
       if (getprotobyname_r(protoname, &protobuf, buf, buflen, &pe) == ERANGE)
-# endif
+#  endif
 	{
 	  buflen += 1024;
 	  delete [] buf;
@@ -727,6 +769,7 @@ int KResolver::protocolNumber(const char
 	break;
     }
   while (pe == 0L);
+# endif
 #endif
 
   // Do common processing
@@ -735,7 +778,9 @@ int KResolver::protocolNumber(const char
     protonum = pe->p_proto;
 
 #ifdef HAVE_GETPROTOBYNAME_R
+# ifndef USE_OPENBSD
   delete [] buf;
+# endif
 #endif
 
   return protonum;
@@ -750,17 +795,27 @@ int KResolver::servicePort(const char *s
   se = getservbyname(servname, protoname);
 
 #else
+# ifdef USE_OPENBSD // OpenBSD uses an HP/IBM/DEC API
+  struct servent servbuf;
+  struct servent_data sdata;
+  ::memset(&sdata, 0, sizeof sdata);
+  if (getservbyname_r(servname, protoname, &servbuf, &sdata) == 0)
+    se = &servbuf;
+  else
+    se = 0;
+
+# else
   size_t buflen = 1024;
   struct servent servbuf;
   char *buf;
   do
     {
       buf = new char[buflen];
-# ifdef USE_SOLARIS // Solaris uses a 5 argument getservbyname_r which returns struct *servent or NULL
+#  ifdef USE_SOLARIS // Solaris uses a 5 argument getservbyname_r which returns struct *servent or NULL
       if ((se = getservbyname_r(servname, protoname, &servbuf, buf, buflen)) && (errno == ERANGE))
-# else
+#  else
       if (getservbyname_r(servname, protoname, &servbuf, buf, buflen, &se) == ERANGE)
-# endif
+#  endif
 	{
 	  buflen += 1024;
 	  delete [] buf;
@@ -777,7 +832,9 @@ int KResolver::servicePort(const char *s
     servport = ntohs(se->s_port);
 
 #ifdef HAVE_GETSERVBYNAME_R
+# ifndef USE_OPENBSD
   delete [] buf;
+# endif
 #endif
 
   return servport;
@@ -792,17 +849,27 @@ QStrList KResolver::serviceName(const ch
   se = getservbyname(servname, protoname);
 
 #else
+# ifdef USE_OPENBSD // OpenBSD uses an HP/IBM/DEC API
+  struct servent servbuf;
+  struct servent_data sdata;
+  ::memset(&sdata, 0, sizeof sdata);
+  if (getservbyname_r(servname, protoname, &servbuf, &sdata) == 0)
+    se = &servbuf;
+  else
+    se = 0;
+
+# else
   size_t buflen = 1024;
   struct servent servbuf;
   char *buf;
   do
     {
       buf = new char[buflen];
-# ifdef USE_SOLARIS // Solaris uses a 5 argument getservbyname_r which returns struct *servent or NULL
+#  ifdef USE_SOLARIS // Solaris uses a 5 argument getservbyname_r which returns struct *servent or NULL
       if ((se = getservbyname_r(servname, protoname, &servbuf, buf, buflen)) && (errno == ERANGE))
-# else
+#  else
       if (getservbyname_r(servname, protoname, &servbuf, buf, buflen, &se) == ERANGE)
-# endif
+#  endif
 	{
 	  buflen += 1024;
 	  delete [] buf;
@@ -811,6 +878,7 @@ QStrList KResolver::serviceName(const ch
 	break;
     }
   while (se == 0L);
+# endif
 #endif
 
   // Do common processing
@@ -823,7 +891,9 @@ QStrList KResolver::serviceName(const ch
     }
 
 #ifdef HAVE_GETSERVBYNAME_R
+# ifndef USE_OPENBSD
   delete [] buf;
+# endif
 #endif
 
   return lst;
@@ -838,17 +908,27 @@ QStrList KResolver::serviceName(int port
   se = getservbyport(port, protoname);
 
 #else
+# ifdef USE_OPENBSD // OpenBSD uses an HP/IBM/DEC API
+  struct servent servbuf;
+  struct servent_data sdata;
+  ::memset(&sdata, 0, sizeof sdata);
+  if (getservbyport_r(port, protoname, &servbuf, &sdata) == 0)
+    se = &servbuf;
+  else
+    se = 0;
+
+# else
   size_t buflen = 1024;
   struct servent servbuf;
   char *buf;
   do
     {
       buf = new char[buflen];
-# ifdef USE_SOLARIS // Solaris uses a 5 argument getservbyport_r which returns struct *servent or NULL
+#  ifdef USE_SOLARIS // Solaris uses a 5 argument getservbyport_r which returns struct *servent or NULL
       if ((se = getservbyport_r(port, protoname, &servbuf, buf, buflen)) && (errno == ERANGE))
-# else
+#  else
       if (getservbyport_r(port, protoname, &servbuf, buf, buflen, &se) == ERANGE)
-# endif
+#  endif
 	{
 	  buflen += 1024;
 	  delete [] buf;
@@ -857,6 +937,8 @@ QStrList KResolver::serviceName(int port
 	break;
     }
   while (se == 0L);
+# endif
+# endif
 #endif
 
   // Do common processing
@@ -869,7 +951,9 @@ QStrList KResolver::serviceName(int port
     }
 
 #ifdef HAVE_GETSERVBYPORT_R
+# ifndef USE_OPENBSD
   delete [] buf;
+# endif
 #endif
 
   return lst;
