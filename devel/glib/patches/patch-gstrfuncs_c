$OpenBSD: patch-gstrfuncs_c,v 1.1 2010/05/09 15:05:31 robert Exp $
--- gstrfuncs.c.orig	Sun May  9 17:01:49 2010
+++ gstrfuncs.c	Sun May  9 17:02:42 2010
@@ -867,7 +867,7 @@ g_printf_string_upper_bound (const gchar* format,
                   /* beware of positional parameters
                    */
                 case '$':
-                  g_warning (G_GNUC_PRETTY_FUNCTION
+                  g_warning ("%s%s", G_GNUC_PRETTY_FUNCTION,
                              "(): unable to handle positional parameters (%%n$)");
                   len += 1024; /* try adding some safety padding */
                   break;
@@ -1034,7 +1034,7 @@ g_printf_string_upper_bound (const gchar* format,
                   /*          n   .   dddddddddddddddddddddddd   E   +-  eeee */
                   conv_len += 1 + 1 + MAX (24, spec.precision) + 1 + 1 + 4;
                   if (spec.mod_extra_long)
-                    g_warning (G_GNUC_PRETTY_FUNCTION
+                    g_warning ("%s%s", G_GNUC_PRETTY_FUNCTION,
                                "(): unable to handle long double, collecting double only");
 #ifdef HAVE_LONG_DOUBLE
 #error need to implement special handling for long double
@@ -1077,7 +1077,7 @@ g_printf_string_upper_bound (const gchar* format,
                   conv_done = TRUE;
                   if (spec.mod_long)
                     {
-                      g_warning (G_GNUC_PRETTY_FUNCTION
+                      g_warning ("%s%s", G_GNUC_PRETTY_FUNCTION,
                                  "(): unable to handle wide char strings");
                       len += 1024; /* try adding some safety padding */
                     }
@@ -1108,7 +1108,7 @@ g_printf_string_upper_bound (const gchar* format,
                   conv_len += format - spec_start;
                   break;
                 default:
-                  g_warning (G_GNUC_PRETTY_FUNCTION
+                  g_warning ("%s%s", G_GNUC_PRETTY_FUNCTION,
                              "(): unable to handle `%c' while parsing format",
                              c);
                   break;
