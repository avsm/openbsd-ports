$OpenBSD: patch-speech_tools_stats_EST_DProbDist_cc,v 1.1 2010/06/06 07:45:31 espie Exp $
--- speech_tools/stats/EST_DProbDist.cc.orig	Sun Jun  6 09:32:19 2010
+++ speech_tools/stats/EST_DProbDist.cc	Sun Jun  6 09:36:58 2010
@@ -305,15 +305,15 @@ double EST_DiscreteProbDistribution::entropy() const
 }
 
 //  For iterating through members of a probability distribution
-int EST_DiscreteProbDistribution::item_start(void) const
+long EST_DiscreteProbDistribution::item_start(void) const
 {
     if (type == tprob_discrete)
 	return 0;
     else
-	return (int)scounts.list.head();
+	return (long)scounts.list.head();
 }
 
-int EST_DiscreteProbDistribution::item_end(int idx) const
+long EST_DiscreteProbDistribution::item_end(long idx) const
 {
     if (type == tprob_discrete)
 	return (idx >= icounts.length());
@@ -321,15 +321,15 @@ int EST_DiscreteProbDistribution::item_end(int idx) co
 	return ((EST_Litem *)idx == 0);
 }
 
-int EST_DiscreteProbDistribution::item_next(int idx) const
+long EST_DiscreteProbDistribution::item_next(long idx) const
 {
     if (type == tprob_discrete)
 	return ++idx;
     else
-	return (int)next((EST_Litem *)idx);
+	return (long)next((EST_Litem *)idx);
 }
 
-const EST_String &EST_DiscreteProbDistribution::item_name(int idx) const
+const EST_String &EST_DiscreteProbDistribution::item_name(long idx) const
 {
     if (type == tprob_discrete)
 	return discrete->name(idx);
@@ -337,7 +337,7 @@ const EST_String &EST_DiscreteProbDistribution::item_n
 	return scounts.list((EST_Litem *)idx).k;
 }
 
-void EST_DiscreteProbDistribution::item_freq(int idx,EST_String &s,double &freq) const
+void EST_DiscreteProbDistribution::item_freq(long idx,EST_String &s,double &freq) const
 {
     if (type == tprob_discrete)
     {
@@ -351,7 +351,7 @@ void EST_DiscreteProbDistribution::item_freq(int idx,E
     }
 }
 
-void EST_DiscreteProbDistribution::item_prob(int idx,EST_String &s,double &prob) const
+void EST_DiscreteProbDistribution::item_prob(long idx,EST_String &s,double &prob) const
 {
     if (type == tprob_discrete)
     {
@@ -368,7 +368,7 @@ void EST_DiscreteProbDistribution::item_prob(int idx,E
 ostream & operator<<(ostream &s, const EST_DiscreteProbDistribution &pd)
 {
     // Output best with probabilities
-    int i;
+    long i;
     double prob;
     double sum=0;
     EST_String name;
