$OpenBSD: patch-khtml_ecma_kjs_window_cpp,v 1.1.2.1 2003/04/10 18:59:40 brad Exp $
--- khtml/ecma/kjs_window.cpp.orig	Fri Nov  1 12:46:44 2002
+++ khtml/ecma/kjs_window.cpp	Wed Apr  9 23:18:48 2003
@@ -695,19 +695,7 @@ void Window::put(ExecState* exec, const 
       return;
     }
     case _Location: {
-      // No isSafeScript here, it's not a security problem to redirect another window
-      // (tested in other browsers)
-      // Complete the URL using the "active part" (running interpreter)
-      KHTMLPart* p = Window::retrieveActive(exec)->m_part;
-      if (p) {
-        QString dstUrl = p->htmlDocument().completeURL(value.toString(exec).string()).string();
-        //kdDebug() << "Window::put dstUrl=" << dstUrl << " m_part->url()=" << m_part->url().url() << endl;
-        // Check if the URL is the current one. No [infinite] redirect in that case.
-        if ( !m_part->url().cmp( KURL(dstUrl), true ) )
-            m_part->scheduleRedirection(0,
-                                        dstUrl,
-                                        false /*don't lock history*/);
-      }
+      goURL(exec, value.toString(exec).qstring());
       return;
     }
     case Onabort:
@@ -848,6 +836,27 @@ void Window::closeNow()
   }
 }
 
+void Window::goURL(ExecState* exec, const QString& url, bool lockHistory)
+{
+  Window* active = Window::retrieveActive(exec);
+  // Complete the URL using the "active part" (running interpreter)
+  if (active->part()) {
+    QString dstUrl = active->part()->htmlDocument().completeURL(url).string();
+    kdDebug() << "Window::goURL dstUrl=" << dstUrl << " m_part->url()=" << m_part->url().url() << endl;
+    // Check if the URL is the current one. No [infinite] redirect in that case.
+    if ( m_part->url().cmp( KURL(dstUrl), true ) )
+        return;
+
+    // check if we're allowed to inject javascript
+    // SYNC check with khtml_part.cpp::slotRedirect!
+    if ( isSafeScript(exec) ||
+            dstUrl.find(QString::fromLatin1("javascript:"), 0, false) != 0 )
+      m_part->scheduleRedirection(-1,
+                                dstUrl,
+                                  lockHistory);
+  }
+}
+
 void Window::afterScriptExecution()
 {
   DOM::DocumentImpl::updateDocumentsRendering();
@@ -1009,7 +1018,8 @@ Value WindowFunc::tryCall(ExecState *exe
   UString s = v.toString(exec);
   str = s.qstring();
 
-  switch (id) {
+ // functions that work everywhere
+ switch (id) {
   case Window::Alert:
     part->xmlDocImpl()->updateRendering();
     KMessageBox::error(widget, QStyleSheet::convertFromPlainText(str), "JavaScript");
@@ -1143,14 +1153,14 @@ Value WindowFunc::tryCall(ExecState *exe
       {
           while ( part->parentPart() )
               part = part->parentPart();
-          part->scheduleRedirection(0, url.url(), false/*don't lock history*/);
+          Window::retrieveWindow(part)->goURL(exec, url.url(), false /*don't lock history*/);
           return Window::retrieve(part);
       }
       if ( uargs.frameName == "_parent" )
       {
           if ( part->parentPart() )
               part = part->parentPart();
-          part->scheduleRedirection(0, url.url(), false/*don't lock history*/);
+          Window::retrieveWindow(part)->goURL(exec, url.url(), false /*don't lock history*/);
           return Window::retrieve(part);
       }
       uargs.serviceType = "text/html";
@@ -1183,6 +1193,21 @@ Value WindowFunc::tryCall(ExecState *exe
         return Undefined();
     }
   }
+  case Window::Focus:
+    if (widget)
+      widget->setActiveWindow();
+    return Undefined();
+  case Window::Blur:
+    // TODO
+    return Undefined();
+  };
+
+
+  // now unsafe functions..
+  if (!window->isSafeScript(exec))
+    return Undefined();
+
+  switch (id) {
   case Window::ScrollBy:
     if(args.size() == 2 && widget)
       widget->scrollBy(args[0].toInt32(exec), args[1].toInt32(exec));
@@ -1298,13 +1323,6 @@ Value WindowFunc::tryCall(ExecState *exe
   case Window::ClearInterval:
     (const_cast<Window*>(window))->clearTimeout(v.toInt32(exec));
     return Undefined();
-  case Window::Focus:
-    if (widget)
-      widget->setActiveWindow();
-    return Undefined();
-  case Window::Blur:
-    // TODO
-    return Undefined();
   case Window::Close: {
     /* From http://developer.netscape.com/docs/manuals/js/client/jsref/window.htm :
        The close method closes only windows opened by JavaScript using the open method.
@@ -1677,7 +1695,7 @@ void Location::put(ExecState *exec, cons
     return;
   }
 
-  m_part->scheduleRedirection(0, url.url(), false /*don't lock history*/);
+  Window::retrieveWindow(m_part)->goURL(exec, url.url(), false /* don't lock history*/ );
 }
 
 Value Location::toPrimitive(ExecState *exec, Type) const
@@ -1710,14 +1728,19 @@ Value LocationFunc::tryCall(ExecState *e
   }
   Location *location = static_cast<Location *>(thisObj.imp());
   KHTMLPart *part = location->part();
+
+  if (!part) return Undefined();
+
+  Window* window = Window::retrieveWindow(part);
+
+  if ( !window->isSafeScript(exec) && id != Location::Replace)
+      return Undefined();
+
   if (part) {
     switch (id) {
     case Location::Replace:
     {
-      QString str = args[0].toString(exec).qstring();
-      KHTMLPart* p = Window::retrieveActive(exec)->part();
-      if ( p )
-        part->scheduleRedirection(0, p->htmlDocument().completeURL(str).string(), true /*lock history*/);
+      Window::retrieveWindow(part)->goURL(exec, args[0].toString(exec).qstring(), true);
       break;
     }
     case Location::Reload:
