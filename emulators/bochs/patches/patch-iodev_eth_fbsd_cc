$OpenBSD: patch-iodev_eth_fbsd_cc,v 1.1 2001/02/02 16:59:11 todd Exp $
--- iodev/eth_fbsd.cc.orig	Sat Mar 25 21:28:48 2000
+++ iodev/eth_fbsd.cc	Tue Oct 17 12:04:02 2000
@@ -146,19 +146,19 @@ bx_fbsd_pktmover_c::bx_fbsd_pktmover_c(c
   } while (this->bpf_fd < 0);
   
   if (this->bpf_fd < 0) {
-    bx_printf ("eth_freebsd: could not open packet filter\n");
+    bio->printf ("eth_freebsd: could not open packet filter\n");
     return;
   }
 
   if (ioctl(this->bpf_fd, BIOCVERSION, (caddr_t)&bv) < 0) {
-    bx_printf("eth_freebsd: could not retrieve bpf version\n");
+    bio->printf("eth_freebsd: could not retrieve bpf version\n");
     close(this->bpf_fd);
     this->bpf_fd = -1;
     return;
   }
   if (bv.bv_major != BPF_MAJOR_VERSION ||
       bv.bv_minor < BPF_MINOR_VERSION) {
-    bx_printf("eth_freebsd: bpf version mismatch\n");
+    bio->printf("eth_freebsd: bpf version mismatch\n");
     close(this->bpf_fd);
     this->bpf_fd = -1;
     return;
@@ -167,7 +167,7 @@ bx_fbsd_pktmover_c::bx_fbsd_pktmover_c(c
   // Set buffer size
   v = BX_BPF_BUFSIZ;
   if (ioctl(this->bpf_fd, BIOCSBLEN, (caddr_t)&v) < 0) {
-    bx_printf("eth_freebsd: could not set buffer size\n");
+    bio->printf("eth_freebsd: could not set buffer size\n");
     close(this->bpf_fd);
     this->bpf_fd = -1;
     return;
@@ -175,20 +175,20 @@ bx_fbsd_pktmover_c::bx_fbsd_pktmover_c(c
 
   (void)strncpy(ifr.ifr_name, netif, sizeof(ifr.ifr_name));
   if (ioctl(this->bpf_fd, BIOCSETIF, (caddr_t)&ifr) < 0) {
-    bx_printf("eth_freebsd: could not enable interface %s\n", netif);
+    bio->printf("eth_freebsd: could not enable interface %s\n", netif);
     close(this->bpf_fd);
     this->bpf_fd == -1;
   }
   
   // Verify that the device is an ethernet.
   if (ioctl(this->bpf_fd, BIOCGDLT, (caddr_t)&v) < 0) {
-    bx_printf("eth_freebsd: could not retrieve datalink type\n");
+    bio->printf("eth_freebsd: could not retrieve datalink type\n");
     close(this->bpf_fd);
     this->bpf_fd = -1;
     return;
   }
   if (v != DLT_EN10MB) {
-    bx_printf("eth_freebsd: incorrect datalink type %d\n", v);
+    bio->printf("eth_freebsd: incorrect datalink type %d\n", v);
     close(this->bpf_fd);
     this->bpf_fd = -1;
     return;
@@ -199,7 +199,7 @@ bx_fbsd_pktmover_c::bx_fbsd_pktmover_c(c
   // but this will do for now.
   //
   if (ioctl(this->bpf_fd, BIOCPROMISC, NULL) < 0) {
-    bx_printf("eth_freebsd: could not enable promisc mode\n");
+    bio->printf("eth_freebsd: could not enable promisc mode\n");
     close(this->bpf_fd);
     this->bpf_fd = -1;
     return;
@@ -208,7 +208,7 @@ bx_fbsd_pktmover_c::bx_fbsd_pktmover_c(c
   // Set up non-blocking i/o
   v = 1;
   if (ioctl(this->bpf_fd, FIONBIO, &v) < 0) {
-    bx_printf("eth_freebsd: could not enable non-blocking i/o\n");
+    bio->printf("eth_freebsd: could not enable non-blocking i/o\n");
     close(this->bpf_fd);
     this->bpf_fd = -1;
     return;
@@ -229,7 +229,7 @@ bx_fbsd_pktmover_c::bx_fbsd_pktmover_c(c
   bp.bf_len   = 8;
   bp.bf_insns = &this->filter[0];
   if (ioctl(this->bpf_fd, BIOCSETF, &bp) < 0) {
-    bx_printf("eth_freebsd: could not set filter\n");
+    bio->printf("eth_freebsd: could not set filter\n");
     close(this->bpf_fd);
     this->bpf_fd = -1;
     return;
