$OpenBSD: patch-src_tools_solver_lp_solve_lp_solve_c,v 1.2 2008/06/03 16:36:54 jasper Exp $
--- src/tools/solver/lp_solve/lp_solve.c.orig	Mon Jun  2 11:43:37 2008
+++ src/tools/solver/lp_solve/lp_solve.c	Mon Jun  2 11:49:38 2008
@@ -9142,7 +9142,7 @@ static void LU1FAD(LUSOLrec *LUSOL,
          MELIM, NELIM, JMAX, IMAX, LL1, LSAVE, LFREE, LIMIT, MINFRE, LPIVR, LPIVR1, LPIVR2,
          L, LPIVC, LPIVC1, LPIVC2, KBEST, LU, LR, LENJ, LC1, LAST, LL, LS,
          LENI, LR1, LFIRST, NFILL, NZCHNG, K, MRANK, NSING;
-  gnm_float   LIJ, LTOL, SMALL, USPACE, DENS1, DENS2, AIJMAX, AIJTOL, AMAX, ABEST, DIAG, V;
+  gnm_float   LIJ, LTOL, SMALL, U_SPACE, DENS1, DENS2, AIJMAX, AIJTOL, AMAX, ABEST, DIAG, V;
 #ifdef ClassicHamaxR
   int    LDIAGU;
 #else
@@ -9207,7 +9207,7 @@ static void LU1FAD(LUSOLrec *LUSOL,
 
   LTOL = LUSOL->parmlu[LUSOL_RP_FACTORMAX_Lij];
   SMALL = LUSOL->parmlu[LUSOL_RP_ZEROTOLERANCE];
-  USPACE = LUSOL->parmlu[LUSOL_RP_COMPSPACE_U];
+  U_SPACE = LUSOL->parmlu[LUSOL_RP_COMPSPACE_U];
   DENS1 = LUSOL->parmlu[LUSOL_RP_MARKOWITZ_CONLY];
   DENS2 = LUSOL->parmlu[LUSOL_RP_MARKOWITZ_DENSE];
   UTRI = TRUE;
@@ -9596,7 +9596,7 @@ x300:
       AMAXR += L;
 #endif
     }
-    LIMIT = (int) (USPACE*LFILE)+LUSOL->m+LUSOL->n+1000;
+    LIMIT = (int) (U_SPACE*LFILE)+LUSOL->m+LUSOL->n+1000;
 
 /*         Make sure the column file has room.
            Also force a compression if its length exceeds a certain limit. */
@@ -10134,10 +10134,10 @@ x990:
    parmlu( 5) = Utol2    Relative tol for flagging    eps**0.67= 3.7d-11
                          small diagonals of U.
                          (eps = machine precision)
-   parmlu( 6) = Uspace   Factor limiting waste space in  U.      3.0
+   parmlu( 6) = U_space   Factor limiting waste space in  U.      3.0
                          In lu1fac, the row or column lists
                          are compressed if their length
-                         exceeds Uspace times the length of
+                         exceeds U_space times the length of
                          either file after the last compression.
    parmlu( 7) = dens1    The density at which the Markowitz      0.3
                          pivot strategy should search maxcol
@@ -10901,11 +10901,11 @@ static void LU7FOR(LUSOLrec *LUSOL, int KFIRST, int KL
   gboolean SWAPPD;
   int    KBEGIN, IW, LENW, LW1, LW2, JFIRST, MINFRE, NFREE, L, J, KSTART, KSTOP, K,
          LFIRST, IV, LENV, LV1, JLAST, LV2, LV3, LV, JV, LW, LDIAG, LIMIT;
-  gnm_float   AMULT, LTOL, USPACE, SMALL, VJ, WJ;
+  gnm_float   AMULT, LTOL, U_SPACE, SMALL, VJ, WJ;
 
   LTOL   = LUSOL->parmlu[LUSOL_RP_UPDATEMAX_Lij];
   SMALL  = LUSOL->parmlu[LUSOL_RP_ZEROTOLERANCE];
-  USPACE = LUSOL->parmlu[LUSOL_RP_COMPSPACE_U];
+  U_SPACE = LUSOL->parmlu[LUSOL_RP_COMPSPACE_U];
   KBEGIN = KFIRST;
   SWAPPD = FALSE;
 
@@ -11175,7 +11175,7 @@ x910:
         This should prevent memory fragmentation when there is far more
         memory than necessary  (i.e. when  lena  is huge). */
 x950:
-  LIMIT = (int) (USPACE*(*LENU))+LUSOL->m+LUSOL->n+1000;
+  LIMIT = (int) (U_SPACE*(*LENU))+LUSOL->m+LUSOL->n+1000;
   if(*LROW>LIMIT)
     LU1REC(LUSOL, LUSOL->m,TRUE,LROW,LUSOL->indr,LUSOL->lenr,LUSOL->locr);
   goto x990;
