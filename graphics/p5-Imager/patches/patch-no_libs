--- Makefile.PL.orig	Tue Oct 30 01:32:44 2001
+++ Makefile.PL	Thu Nov 15 23:32:02 2001
@@ -151,9 +151,9 @@ bugs.  Imager can crash or display other
 reading or writing gif images.  Some of the gif tests can even fail
 since they stress some parts of the buggy code.
 
-Do you want to remove gif support? [Y/n]
+I am deleting gif/ungif support.
 EOFF
-    my $resp = <STDIN>;
+    my $resp = "y";
     chomp($resp);
     if ($resp ne "n") {
       delete $formats{'gif'};
@@ -263,7 +263,7 @@ sub pathcheck {
 sub init {
 
   @definc{'/usr/include'}=();
-  @incs=(qw(/usr/include/freetype2 /usr/local/include/freetype2 /usr/include /usr/local/include /usr/include/freetype /usr/local/include/freetype), split /:/, $INCPATH );
+  @incs=(qw(/usr/include), split /:/, $INCPATH );
   @libs=(split(/ /, $Config{'libpth'}), split(/:/, $LIBPATH) );
   if ($^O =~ /win32/i && $Config{cc} =~ /\bcl\b/i) {
     push(@incs, split /;/, $ENV{INCLUDE}) if exists $ENV{INCLUDE};
@@ -274,126 +274,6 @@ sub init {
     push(@incs, '/usr/include/w32api') if -d '/usr/lib/w32api';
   }
 
-  $formats{'jpeg'}={
-		    order=>'21',
-		    def=>'HAVE_LIBJPEG',
-		    inccheck=>sub { $_[0] eq 'jpeglib.h' },
-		    libcheck=>sub { $_[0] eq "libjpeg$aext" or $_ eq "libjpeg.$lext" },
-		    libfiles=>'-ljpeg',
-		    objfiles=>'jpeg.o',
-		    docs=>q{
-			    In order to use jpeg with this module you need to have libjpeg
-			    installed on your computer}
-		   };
-
-  $formats{'tiff'}={
-		    order=>'23',
-		    def=>'HAVE_LIBTIFF',
-		    inccheck=>sub { $_[0] eq 'tiffio.h' },
-		    libcheck=>sub { $_[0] eq "libtiff$aext" or $_ eq "libtiff.$lext" },
-		    libfiles=>'-ltiff',
-		    objfiles=>'tiff.o',
-		    docs=>q{
-			    In order to use tiff with this module you need to have libtiff
-			    installed on your computer}
-		   };
-
-  $formats{'png'}={
-		   order=>'22',
-		   def=>'HAVE_LIBPNG',
-		   inccheck=>sub { $_[0] eq 'png.h' },
-		   libcheck=>sub { $_[0] eq "libpng$aext" or $_[0] eq "libpng.$lext" },
-		   libfiles=>'-lpng -lz',
-		   objfiles=>'png.o',
-		   docs=>q{
-			   Png stands for Portable Network Graphics and is intended as
-			   a replacement for gif on the web. It is patent free and
-			   is recommended by the w3c, you need libpng to use these formats}
-		  };
-
-  $formats{'gif'}={
-		   order=>'20',
-		   def=>'HAVE_LIBGIF',
-		   inccheck=>sub { $_[0] eq 'gif_lib.h' },
-		   libcheck=>sub { $_[0] eq "libgif$aext" or $_[0] eq "libgif.$lext" },
-		   libfiles=>'-lgif',
-		   objfiles=>'gif.o',
-		   docs=>q{
-			   gif is the de facto standard for webgraphics at the moment,
-			   it does have some patent problems. If you have giflib and
-			   are not in violation with the unisys patent you should use
-			   this instead of the 'ungif' option.  Note that they cannot
-			   be in use at the same time}
-		  };
-
-  $formats{'ungif'}={
-		     order=>'21',
-		     def=>'HAVE_LIBGIF',
-		     inccheck=>sub { $_[0] eq 'gif_lib.h' },
-		     libcheck=>sub { $_[0] eq "libungif$aext" or $_[0] eq "libungif.$lext" },
-		     libfiles=>'-lungif',
-		     objfiles=>'gif.o',
-		     docs=>q{
-			     gif is the de facto standard for webgraphics at the moment,
-			     it does have some patent problems. If you have libungif and
-			     want to create images free from LZW patented compression you
-			     should use this option instead of the 'gif' option}
-		    };
-
-  $formats{'T1-fonts'}={
-			order=>'30',
-			def=>'HAVE_LIBT1',
-			inccheck=>sub { $_[0] eq 't1lib.h' },
-			libcheck=>sub { $_[0] eq "libt1$aext" or $_[0] eq "libt1.$lext" },
-			libfiles=>'-lt1',
-			objfiles=>'',
-			docs=>q{
-				postscript t1 fonts are scalable fonts. They can include 
-				ligatures and kerning information and generally yield good
-				visual quality. We depend on libt1 to rasterize the fonts
-				for use in images.}
-		       };
-
-  $formats{'TT-fonts'}={
-			order=>'31',
-			def=>'HAVE_LIBTT',
-			inccheck=>sub { $_[0] eq 'freetype.h' },
-			libcheck=>sub { $_[0] eq "libttf$aext" or $_[0] eq "libttf.$lext" },
-			libfiles=>'-lttf',
-			objfiles=>'',
-			docs=>q{
-				Truetype fonts are scalable fonts. They can include 
-				kerning and hinting information and generally yield good
-				visual quality esp on low resultions. The freetype library is
-				used to rasterize for us. The only drawback is that there
-				are alot of badly designed fonts out there.}
-		       };
-  $formats{'w32'} = {
-		     order=>40,
-		     def=>'HAVE_WIN32',
-		     inccheck=>sub { lc $_[0] eq 'windows.h' },
-		     libcheck=>sub { lc $_[0] eq 'gdi32.lib' 
-				       || lc $_[0] eq 'libgdi32.a' },
-		     libfiles=>$^O eq 'cygwin' ? '-lgdi32' : '',
-		     objfiles=>'win32.o',
-		     docs => <<DOCS
-Uses the Win32 GDI for rendering text.
-
-This currently only works on under normal Win32 and cygwin.
-DOCS
-		    };
-  $formats{'freetype2'} = {
-                           order=>'29',
-                           def=>'HAVE_FT2',
-                           inccheck=>sub { lc $_[0] eq 'ft2build.h' },
-                           libcheck=>sub { $_[0] eq "libfreetype$aext" or $_[0] eq "libfreetype.$lext" },
-                           libfiles=>'-lfreetype',
-                           objfiles=>'freetyp2.o',
-                           docs=><<DOCS
-Freetype 2 supports both Truetype and Type 1 fonts, both of which are
-scalable.
-DOCS
-                          };
   # Make fix indent
   for (keys %formats) { $formats{$_}->{docs} =~ s/^\s+/  /mg; }
 }
