$OpenBSD: patch-src_iop_lens_c,v 1.1.1.1 2010/09/17 21:37:19 sthen Exp $

missing sentinel in function call; pushed upstream

--- src/iop/lens.c.orig	Thu Sep 16 22:37:56 2010
+++ src/iop/lens.c	Thu Sep 16 22:42:35 2010
@@ -446,7 +446,7 @@ static GtkComboBoxEntry *combo_entry_text (
     gtk_table_attach (GTK_TABLE (container), combo, x+1, x+2, y, y+1, 0, 0, 2, 0);
   else if (GTK_IS_BOX (container))
     gtk_box_pack_start (GTK_BOX (container), combo, TRUE, TRUE, 2);
-  gtk_object_set(GTK_OBJECT(combo), "tooltip-text", tip, NULL);
+  gtk_object_set(GTK_OBJECT(combo), "tooltip-text", tip, (char *)NULL);
 
   return GTK_COMBO_BOX_ENTRY (combo);
 }
@@ -637,7 +637,7 @@ static void camera_set (dt_iop_module_t *self, const l
   if (!cam)
   {
     gtk_entry_set_text(GTK_ENTRY(g->camera_model), "");
-    gtk_object_set(GTK_OBJECT(g->camera_model), "tooltip-text", "", NULL);
+    gtk_object_set(GTK_OBJECT(g->camera_model), "tooltip-text", "", (char *)NULL);
     return;
   }
 
@@ -666,7 +666,7 @@ static void camera_set (dt_iop_module_t *self, const l
         "crop factor:\t%.1f"),
       maker, model, _variant,
       cam->Mount, cam->CropFactor);
-  gtk_object_set(GTK_OBJECT(g->camera_model), "tooltip-text", fm, NULL);
+  gtk_object_set(GTK_OBJECT(g->camera_model), "tooltip-text", fm, (char *)NULL);
   g_free (fm);
 }
 
@@ -861,7 +861,7 @@ static void lens_set (dt_iop_module_t *self, const lfL
   if (!lens)
   {
     gtk_entry_set_text(GTK_ENTRY(g->lens_model), "");
-    gtk_object_set(GTK_OBJECT(g->lens_model), "tooltip-text", "", NULL);
+    gtk_object_set(GTK_OBJECT(g->lens_model), "tooltip-text", "", (char *)NULL);
     return;
   }
 
@@ -910,7 +910,7 @@ static void lens_set (dt_iop_module_t *self, const lfL
       maker ? maker : "?", model ? model : "?",
       focal, aperture, lens->CropFactor,
       lf_get_lens_type_desc (lens->Type, NULL), mounts);
-  gtk_object_set(GTK_OBJECT(g->lens_model), "tooltip-text", fm, NULL);
+  gtk_object_set(GTK_OBJECT(g->lens_model), "tooltip-text", fm, (char *)NULL);
   g_free (fm);
 
   /* Create the focal/aperture/distance combo boxes */
@@ -1152,7 +1152,7 @@ void gui_init(struct dt_iop_module_t *self)
 
   button = gtk_button_new_with_label(_("cam"));
   gtk_object_set(GTK_OBJECT(button), "tooltip-text", _("search for camera using a pattern\n"
-        "format: [maker, ][model]"), NULL);
+        "format: [maker, ][model]"), (char *)NULL);
   g_signal_connect (G_OBJECT (button), "clicked",
       G_CALLBACK (camera_search_clicked), self);
   gtk_table_attach(GTK_TABLE(self->widget), button, 2, 3, 0, 1, GTK_FILL, 0, 0, 0);
@@ -1166,7 +1166,7 @@ void gui_init(struct dt_iop_module_t *self)
   button = gtk_button_new_with_label(_("lens"));
   gtk_object_set(GTK_OBJECT(button), "tooltip-text",
       _("search for lens using a pattern\n"
-        "format: [maker, ][model]"), NULL);
+        "format: [maker, ][model]"), (char *)NULL);
   g_signal_connect (G_OBJECT (button), "clicked",
       G_CALLBACK (lens_search_clicked), self);
   gtk_table_attach(GTK_TABLE(self->widget), button, 2, 3, 1, 2, GTK_FILL, 0, 0, 0);
@@ -1197,7 +1197,7 @@ void gui_init(struct dt_iop_module_t *self)
 
   g->target_geom = GTK_COMBO_BOX(gtk_combo_box_new_text());
   gtk_object_set(GTK_OBJECT(g->target_geom), "tooltip-text",
-      _("target geometry"), NULL);
+      _("target geometry"), (char *)NULL);
   gtk_combo_box_append_text(g->target_geom, _("rectilinear"));
   gtk_combo_box_append_text(g->target_geom, _("fish-eye"));
   gtk_combo_box_append_text(g->target_geom, _("panoramic"));
@@ -1228,7 +1228,7 @@ void gui_init(struct dt_iop_module_t *self)
 
   // reverse direction
   g->reverse = GTK_CHECK_BUTTON(gtk_check_button_new_with_label(_("reverse")));
-  gtk_object_set(GTK_OBJECT(g->reverse), "tooltip-text", _("apply distortions instead of correcting them"), NULL);
+  gtk_object_set(GTK_OBJECT(g->reverse), "tooltip-text", _("apply distortions instead of correcting them"), (char *)NULL);
   gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(g->reverse), p->inverse);
   gtk_table_attach(GTK_TABLE(self->widget), GTK_WIDGET(g->reverse), 1, 3, 4, 5, GTK_EXPAND|GTK_FILL, 0, 0, 0);
   g_signal_connect (G_OBJECT (g->reverse), "toggled",
@@ -1247,8 +1247,8 @@ void gui_init(struct dt_iop_module_t *self)
   gtk_table_attach(GTK_TABLE(self->widget), GTK_WIDGET(g->tca_b), 1, 3, 6, 7, GTK_EXPAND|GTK_FILL, 0, 0, 0);
   g_signal_connect (G_OBJECT (g->tca_r), "value-changed", G_CALLBACK (tca_changed), self);
   g_signal_connect (G_OBJECT (g->tca_b), "value-changed", G_CALLBACK (tca_changed), self);
-  gtk_object_set(GTK_OBJECT(g->tca_r), "tooltip-text", _("override transversal chromatic aberration correction for red channel\nleave at 1.0 for defaults"), NULL);
-  gtk_object_set(GTK_OBJECT(g->tca_b), "tooltip-text", _("override transversal chromatic aberration correction for blue channel\nleave at 1.0 for defaults"), NULL);
+  gtk_object_set(GTK_OBJECT(g->tca_r), "tooltip-text", _("override transversal chromatic aberration correction for red channel\nleave at 1.0 for defaults"), (char *)NULL);
+  gtk_object_set(GTK_OBJECT(g->tca_b), "tooltip-text", _("override transversal chromatic aberration correction for blue channel\nleave at 1.0 for defaults"), (char *)NULL);
 }
 
 
