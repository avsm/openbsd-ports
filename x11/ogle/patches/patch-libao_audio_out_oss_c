$OpenBSD: patch-libao_audio_out_oss_c,v 1.2 2001/10/16 15:15:09 espie Exp $
--- libao/audio_out_oss.c.orig	Mon Oct 15 00:37:08 2001
+++ libao/audio_out_oss.c	Tue Oct 16 11:22:38 2001
@@ -83,6 +83,119 @@ static inline int16_t convert (int32_t i
 	return i - 0x43c00000;
 }
 
+unsigned char tr[235] =
+{
+0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22,
+23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
+44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63,
+64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84,
+85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
+104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120,
+121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136,
+137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152,
+153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169,
+170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185,
+186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
+202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218,
+219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234,
+235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
+251, 253, 254, 255
+};
+
+static inline void float_to_int235 (float * _f, int16_t * s16, int flags)
+{
+    int i;
+    int32_t * f = (int32_t *) _f;
+
+    switch (flags) {
+    case A52_MONO:
+	for (i = 0; i < 235; i++) {
+	    s16[5*i] = s16[5*i+1] = s16[5*i+2] = s16[5*i+3] = 0;
+	    s16[5*i+4] = convert (f[tr[i]]);
+	}
+	break;
+    case A52_CHANNEL:
+    case A52_STEREO:
+    case A52_DOLBY:
+	for (i = 0; i < 235; i++) {
+	    s16[2*i] = convert (f[tr[i]]);
+	    s16[2*i+1] = convert (f[tr[i]+256]);
+	}
+	break;
+    case A52_3F:
+	for (i = 0; i < 235; i++) {
+	    s16[5*i] = convert (f[tr[i]]);
+	    s16[5*i+1] = convert (f[tr[i]+512]);
+	    s16[5*i+2] = s16[5*i+3] = 0;
+	    s16[5*i+4] = convert (f[tr[i]+256]);
+	}
+	break;
+    case A52_2F2R:
+	for (i = 0; i < 235; i++) {
+	    s16[4*i] = convert (f[tr[i]]);
+	    s16[4*i+1] = convert (f[tr[i]+256]);
+	    s16[4*i+2] = convert (f[tr[i]+512]);
+	    s16[4*i+3] = convert (f[tr[i]+768]);
+	}
+	break;
+    case A52_3F2R:
+	for (i = 0; i < 235; i++) {
+	    s16[5*i] = convert (f[tr[i]]);
+	    s16[5*i+1] = convert (f[tr[i]+512]);
+	    s16[5*i+2] = convert (f[tr[i]+768]);
+	    s16[5*i+3] = convert (f[tr[i]+1024]);
+	    s16[5*i+4] = convert (f[tr[i]+256]);
+	}
+	break;
+    case A52_MONO | A52_LFE:
+	for (i = 0; i < 235; i++) {
+	    s16[6*i] = s16[6*i+1] = s16[6*i+2] = s16[6*i+3] = 0;
+	    s16[6*i+4] = convert (f[tr[i]+256]);
+	    s16[6*i+5] = convert (f[tr[i]]);
+	}
+	break;
+    case A52_CHANNEL | A52_LFE:
+    case A52_STEREO | A52_LFE:
+    case A52_DOLBY | A52_LFE:
+	for (i = 0; i < 235; i++) {
+	    s16[6*i] = convert (f[tr[i]+256]);
+	    s16[6*i+1] = convert (f[tr[i]+512]);
+	    s16[6*i+2] = s16[6*i+3] = s16[6*i+4] = 0;
+	    s16[6*i+5] = convert (f[tr[i]]);
+	}
+	break;
+    case A52_3F | A52_LFE:
+	for (i = 0; i < 235; i++) {
+	    s16[6*i] = convert (f[tr[i]+256]);
+	    s16[6*i+1] = convert (f[tr[i]+768]);
+	    s16[6*i+2] = s16[6*i+3] = 0;
+	    s16[6*i+4] = convert (f[tr[i]+512]);
+	    s16[6*i+5] = convert (f[tr[i]]);
+	}
+	break;
+    case A52_2F2R | A52_LFE:
+	for (i = 0; i < 235; i++) {
+	    s16[6*i] = convert (f[tr[i]+256]);
+	    s16[6*i+1] = convert (f[tr[i]+512]);
+	    s16[6*i+2] = convert (f[tr[i]+768]);
+	    s16[6*i+3] = convert (f[tr[i]+1024]);
+	    s16[6*i+4] = 0;
+	    s16[6*i+5] = convert (f[tr[i]]);
+	}
+	break;
+    case A52_3F2R | A52_LFE:
+	for (i = 0; i < 235; i++) {
+	    s16[6*i] = convert (f[tr[i]+256]);
+	    s16[6*i+1] = convert (f[tr[i]+768]);
+	    s16[6*i+2] = convert (f[tr[i]+1024]);
+	    s16[6*i+3] = convert (f[tr[i]+1280]);
+	    s16[6*i+4] = convert (f[tr[i]+512]);
+	    s16[6*i+5] = convert (f[tr[i]]);
+	}
+	break;
+    }
+}
+
 static inline void float_to_int (float * _f, int16_t * s16, int flags)
 {
     int i;
@@ -182,6 +295,7 @@ int oss_play (ao_instance_t * _instance,
     oss_instance_t * instance = (oss_instance_t *) _instance;
     int16_t int16_samples[256*6];
     int chans = -1;
+    static int downsample = 0;
 
 #ifdef LIBA52_DOUBLE
     float samples[256 * 6];
@@ -222,11 +336,22 @@ int oss_play (ao_instance_t * _instance,
 	    return 1;
 	}
 
+	downsample = 0;
 	tmp = instance->sample_rate;
+	fprintf(stderr, "Sample rate %d\n", instance->sample_rate);
 	if ((ioctl (instance->fd, SNDCTL_DSP_SPEED, &tmp) < 0) ||
 	    (tmp != instance->sample_rate)) {
 	    fprintf (stderr, "Can not set sample rate\n");
-	    return 1;
+	    if (instance->sample_rate == 48000) {
+	    	tmp = 44100;
+		if ((ioctl (instance->fd, SNDCTL_DSP_SPEED, &tmp) < 0) ||
+		    (tmp != 44100)) {
+			fprintf (stderr, "Can not downsample to 44100\n");
+			return 1;
+	    	}
+		downsample = 1;
+	    } else
+		return 1;
 	}
 
 	instance->flags = flags;
@@ -239,10 +364,13 @@ int oss_play (ao_instance_t * _instance,
 	instance->flags = A52_STEREO;
     } else if (flags != instance->flags)
 	return 1;
-
-    float_to_int (samples, int16_samples, flags);
-    write (instance->fd, int16_samples, 256 * sizeof (int16_t) * chans);
-
+    if (downsample) {
+	float_to_int235 (samples, int16_samples, flags);
+	write (instance->fd, int16_samples, 235 * sizeof (int16_t) * chans);
+    } else {
+	float_to_int (samples, int16_samples, flags);
+	write (instance->fd, int16_samples, 256 * sizeof (int16_t) * chans);
+    }
     return 0;
 }
 
@@ -270,7 +398,11 @@ ao_instance_t * oss_open (int flags)
     instance->set_params = 1;
     instance->flags = flags;
 
+#ifdef __OpenBSD__
+    instance->fd = open ("/dev/audio", O_WRONLY);
+#else
     instance->fd = open ("/dev/dsp", O_WRONLY);
+#endif
     if (instance->fd < 0) {
 	fprintf (stderr, "Can not open /dev/dsp\n");
 	instance->fd = open ("/dev/dsp0", O_WRONLY);
