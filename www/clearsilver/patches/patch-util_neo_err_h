--- util/neo_err.h.orig	Wed Jul 11 23:09:09 2007
+++ util/neo_err.h	Thu Jun 26 13:53:40 2008
@@ -122,7 +122,7 @@ NEOERR *nerr_raise_errnof (const char *func, const cha
    nerr_passf(__PRETTY_FUNCTION__,__FILE__,__LINE__,e)
 
 NEOERR *nerr_passf (const char *func, const char *file, int lineno,
-                    NEOERR *err);
+                    NEOERR *nerr);
 
 /* function: nerr_pass_ctx
  * description: this function is used to pass an error up a level in the
@@ -146,24 +146,24 @@ NEOERR *nerr_passf (const char *func, const char *file
 #endif
 
 NEOERR *nerr_pass_ctxf (const char *func, const char *file, int lineno,
-                        NEOERR *err, const char *fmt, ...)
+                        NEOERR *nerr, const char *fmt, ...)
                         ATTRIBUTE_PRINTF(5,6);
 
 /* function: nerr_log_error
  * description: currently, this prints out the error to stderr, and
  *             free's the error chain
  */
-void nerr_log_error (NEOERR *err);
+void nerr_log_error (NEOERR *nerr);
 
 #include "util/neo_str.h"
 /* function: nerr_error_string
  * description: returns the string associated with an error (the bottom
  *              level of the error chain)
- * arguments: err - error
+ * arguments: nerr - error
  *            str - string to which the data is appended
  * returns: None - errors appending to the string are ignored
  */
-void nerr_error_string (NEOERR *err, STRING *str);
+void nerr_error_string (NEOERR *nerr, STRING *str);
 
 /* function: nerr_error_traceback
  * description: returns the full traceback of the error chain
@@ -171,13 +171,13 @@ void nerr_error_string (NEOERR *err, STRING *str);
  *            str - string to which the data is appended
  * returns: None - errors appending to the string are ignored
  */
-void nerr_error_traceback (NEOERR *err, STRING *str);
+void nerr_error_traceback (NEOERR *nerr, STRING *str);
 
 /* function: nerr_ignore
  * description: you should only call this if you actually handle the
  *              error (should I rename it?).  Free's the error chain.
  */
-void nerr_ignore (NEOERR **err);
+void nerr_ignore (NEOERR **nerr);
 
 /* function: nerr_register
  * description: register an error type.  This will assign a numeric value
@@ -186,7 +186,7 @@ void nerr_ignore (NEOERR **err);
  *            name - pretty name for the error type
  * returns: NERR_NOMEM on no memory
  */
-NEOERR *nerr_register (NERR_TYPE *err, const char *name);
+NEOERR *nerr_register (NERR_TYPE *nerr, const char *name);
 
 /* function: nerr_init
  * description: initialize the NEOERR system.  Can be called more than once.
@@ -209,7 +209,7 @@ NEOERR *nerr_init (void);
  *            type - the NEOERR type, as registered with nerr_register
  * returns: true on match
  */
-int nerr_match (NEOERR *err, NERR_TYPE type);
+int nerr_match (NEOERR *nerr, NERR_TYPE type);
 
 /* function: nerr_handle
  * description: nerr_handle is a convenience function.  It is the equivalent
@@ -219,7 +219,7 @@ int nerr_match (NEOERR *err, NERR_TYPE type);
  *            type - the NEOERR type, as registered with nerr_register
  * returns: true on match
  */
-int nerr_handle (NEOERR **err, NERR_TYPE type);
+int nerr_handle (NEOERR **nerr, NERR_TYPE type);
 
 __END_DECLS
 
